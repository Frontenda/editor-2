{
  "version": "0.2.0-alpha.1",
  "source": {
    "TODO": {
      "path": "TODO",
      "mode": "100644",
      "content": "TODO\n----\nBundled Dependencies\n- Build bundled dependencies into published script\n- Dependency source should not be in revision control\n- requires and module.exports\n- inter-component and intra-component dependencies\n- One day we'll need to implement a bundleresque system, but not today\n\nLive Update Demo\n- Hot reload css\n- Display Demo Runtime Errors in console\n\nOpen published page in editor and run live demo with same state as when editor was opened\n- Pass git repo/branch metadata to published page for use in editor\n\nPersist state across demo reloads\n\nOrganize File tree by type\nFile icons\n\nDisplay Diffs\n\nFirst auth doesn't display in bar\n\nCache Git trees and files in some form of local storage\n\nSometimes editor appears blank when switching files\n\nEditor plugins\n- static analysis\n- find in files\n- source file hygiene\n",
      "type": "blob"
    },
    "main.coffee": {
      "path": "main.coffee",
      "mode": "100644",
      "content": "# Get stuff from our package\n{source:files} = PACKAGE\n\nglobal.Sandbox = require 'sandbox'\nrequire(\"./source/duct_tape\")\nrequire(\"./source/deferred\")\n\n# Create and auth a github API\ngithub = require(\"github\")(require(\"./source/github_auth\")())\n\n# Load and attach Templates\ntemplates = (HAMLjr.templates ||= {})\n[\n  \"actions\"\n  \"editor\"\n  \"filetree\"\n  \"github_status\"\n  \"text_editor\"\n  \"repo_info\"\n].each (name) ->\n  template = require(\"./templates/#{name}\")\n  # TODO Transitional type check\n  if typeof template is \"function\"\n    templates[name] = template\n\nActions = require(\"./source/actions\")\nBuilder = require(\"./source/builder\")\nRunner = require(\"./source/runner\")\nRuntime = require(\"./source/runtime\")\nFiletree = require(\"./source/filetree\")\nFile = require(\"./source/file\")\nTextEditor = require(\"./source/text_editor\")\n\n{readSourceConfig} = require(\"./source/util\")\npackager = require(\"./source/packager\")()\n\nnotifications = require(\"notifications\")()\ntemplates.notifications = notifications.template\n{classicError, notify, errors} = notifications\n\n# The root is the node that contains the script file.\nruntime = Runtime(PACKAGE)\nrootNode = runtime.boot()\n\ntry\n  runtime.applyStyleSheet(rootNode, '/style')\n\n$root = $(rootNode)\n\n# Branch Chooser using pull requests\n{models:{Issue, Issues}, templates:{issues:issuesTemplate}} = require(\"issues\")\ntemplates[\"issues\"] = issuesTemplate\nissues = Issues()\n\n# Github repository observable\nrepository = Observable()\n\nrepository.observe (repository) ->\n  issues.repository = repository\n  repository.pullRequests().then issues.reset\n  \n  notify \"Loaded repository: #{repository.full_name()}\"\n\nPACKAGE.repository.url ||= \"repos/#{PACKAGE.repository.full_name}\"\n\nrepository github.Repository(PACKAGE.repository)\n\nbuilder = Builder()\n  \nconfirmUnsaved = ->\n  Deferred.ConfirmIf(filetree.hasUnsavedChanges(), \"You will lose unsaved changes in your current branch, continue?\")\n\n# TODO: Clean up these builder processors\n# Attach repo metadata to package\nbuilder.addPostProcessor (pkg) ->\n  # TODO: Track commit SHA as well\n  pkg.repository = repository().toJSON()\n\n  pkg\n\nbuilder.addPostProcessor (pkg) ->\n  # TODO: Think about a robust way to get 'self' and set it as progenitor data\n  pkg.progenitor =\n    url: \"http://strd6.github.io/editor/\"\n\n  pkg\n\ncloseOpenEditors = ->\n  root = $root.children(\".main\")\n  root.find(\".editor-wrap\").remove()\n\nactions =\n  save: ->\n    notify \"Saving...\"\n\n    Actions.save\n      repository: repository()\n      fileData: filetree.data()\n      builder: builder\n    .then ->\n      # TODO: This could get slightly out of sync if there were changes\n      # during the async call\n      # The correct solution will be to use git shas to determine changed status\n      # but that's a little heavy duty for right now.\n      filetree.markSaved()\n      notify \"Saved and published!\"\n    .fail (args...) ->\n      errors args\n\n  run: ->\n    Actions.run({builder, filetree})\n    .fail errors\n\n  test: ->\n    notify \"Running tests...\"\n\n    Actions.test({builder, filetree})\n    .fail errors\n\n  new_file: ->\n    if name = prompt(\"File Name\", \"newfile.coffee\")\n      file = File\n        filename: name\n        content: \"\"\n      filetree.files.push file\n      filetree.selectedFile file      \n\n  load_repo: (skipPrompt) ->\n    confirmUnsaved()\n    .then ->\n      currentRepositoryName = repository().full_name()\n\n      fullName = prompt(\"Github repo\", currentRepositoryName)\n\n      if fullName\n        github.repository(fullName).then repository\n      else\n        Deferred().reject(\"No repo given\")\n    .then (repositoryInstance) ->\n      notify \"Loading files...\"\n  \n      Actions.load\n        repository: repositoryInstance\n        filetree: filetree\n      .then ->\n        closeOpenEditors()\n        \n        notifications.push \"Loaded\"\n    .fail classicError\n\n  new_feature: ->\n    if title = prompt(\"Description\")\n      notify \"Creating feature branch...\"\n\n      repository().createPullRequest\n        title: title\n      .then (data) ->\n        issue = Issue(data)\n        issues.issues.push issue\n\n        # TODO: Standardize this like backbone or something\n        # or think about using deferreds in some crazy way\n        issues.silent = true\n        issues.currentIssue issue\n        issues.silent = false\n\n        notifications.push \"Created!\"\n      , classicError\n\n  pull_master: ->\n    confirmUnsaved()\n    .then( ->\n      notify \"Merging in default branch...\"\n      repository().pullFromBranch()\n    , classicError\n    ).then ->\n      notifications.push \"Merged!\"\n\n      branchName = repository().branch()\n      notifications.push \"\\nReloading branch #{branchName}...\"\n\n      Actions.load\n        repository: repository()\n        filetree: filetree\n      .then ->\n        notifications.push \"Loaded!\"\n      .fail ->\n        classicError \"Error loading #{repository().url()}\"\n        \n  tag_version: ->\n    notify \"Building...\"\n    \n    builder.build(filetree.data())\n    .then (pkg) ->\n      version = \"v#{readSourceConfig(pkg).version}\"\n\n      notify \"Tagging version #{version} ...\"\n\n      repository().createRef(\"refs/tags/#{version}\")\n      .then ->\n        notifications.push \"Tagged #{version}\"\n      .then ->\n        notifications.push \"\\nPublishing...\"\n\n        # Force branch for jsonp wrapper\n        pkg.repository.branch = version\n\n        repository().publish packager.standAlone(pkg), version\n      .then ->\n        notifications.push \"Published!\"\n\n    .fail classicError\n\nfiletree = Filetree()\nfiletree.load(files)\n\nfiletree.selectedFile.observe (file) ->\n  root = $root.children(\".main\")\n  root.find(\".editor-wrap\").hide()\n  \n  if file.editor\n    file.editor.trigger(\"show\")\n  else\n    root.append(HAMLjr.render \"text_editor\")\n    file.editor = root.find(\".editor-wrap\").last()\n    \n    editor = TextEditor\n      text: file.content()\n      el: file.editor.find('.editor').get(0)\n      mode: file.mode()\n\n    file.editor.on \"show\", ->\n      file.editor.show()\n      editor.editor.focus()\n  \n    editor.text.observe (value) ->\n      file.content(value)\n      \n      # TODO May want to move this into a collection listener for all files\n      # in the filetree\n      if file.path().match(/\\.styl$/)\n        hotReloadCSS(file)\n\nhotReloadCSS = ( (file) ->\n  try\n    css = styl(file.content(), whitespace: true).toString()\n\n  Runner.hotReloadCSS(css, file.path()) if css\n).debounce(100)\n\nissues?.currentIssue.observe (issue) ->\n  # TODO: Formalize this later\n  return if issues.silent\n  \n  changeBranch = (branchName) ->\n    previousBranch = repository().branch()\n\n    confirmUnsaved()\n    .then ->\n      closeOpenEditors()\n\n      # Switch to branch for working on the issue\n      repository().switchToBranch(branchName)\n      .then ->\n        notifications.push \"\\nLoading branch #{branchName}...\"\n\n        Actions.load\n          repository: repository()\n          filetree: filetree\n        .then ->\n          notifications.push \"Loaded!\"\n    , ->\n      # TODO: Issue will appear as being selected even though we cancelled\n      # To correctly handle this we may need to really beef up our observables.\n      # One possibility is to extend observables to full fledged deferreds\n      # which can be rejected by listeners added to the chain.\n      \n      repository.branch(previousBranch)\n\n      classicError \"Error switching to #{branchName}, still on #{previousBranch}\"\n\n  if issue\n    notify issue.fullDescription()\n    \n    changeBranch issue.branchName()\n  else    \n    notify \"Default branch selected\"\n    \n    changeBranch repository().defaultBranch()\n\n$root\n  .append(HAMLjr.render \"editor\",\n    filetree: filetree\n    actions: actions\n    notifications: notifications\n    issues: issues\n    github: github\n    repository: repository\n  )\n\nwindow.onbeforeunload = ->\n  if filetree.hasUnsavedChanges()\n    \"You have some unsaved changes, if you leave now you will lose your work.\"\n",
      "type": "blob"
    },
    "pixie.cson": {
      "path": "pixie.cson",
      "mode": "100644",
      "content": "version: \"0.2.0-alpha.1\"\nwidth: 960\nheight: 800\nremoteDependencies: [\n  \"//cdnjs.cloudflare.com/ajax/libs/coffee-script/1.6.3/coffee-script.min.js\"\n  \"//code.jquery.com/jquery-1.10.1.min.js\"\n  \"//d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js\"\n  \"http://strd6.github.io/tempest/javascripts/envweb.js\"\n  \"http://strd6.github.io/require/master.js\"\n]\ndependencies:\n  issues: \"STRd6/issues:master\"\n  test_runner: \"STRd6/tests:master\"\n  sandbox: \"STRd6/sandbox:master\"\n  notifications: \"STRd6/notifications:master\"\n  github: \"STRd6/github:master\"\n",
      "type": "blob"
    },
    "source/actions.coffee.md": {
      "path": "source/actions.coffee.md",
      "mode": "100644",
      "content": "Some dependencies.\n\n    packager = require(\"./packager\")()\n    Runner = require(\"./runner\")\n    TestRunner = require(\"test_runner\")\n    {readSourceConfig} = require(\"./util\")\n\nThe primary actions of the editor. This should eventually become a mixin.\n\n    publish = ({builder, fileData, repository}) ->\n      builder.build(fileData)\n      .then (pkg) ->\n        repository.publish packager.standAlone(pkg)\n    \n    commit = ({fileData, repository, message}) ->\n      repository.commitTree\n        tree: fileData\n        message: message\n\n    Actions =\n      run: ({builder, filetree}) ->\n        sandbox = Runner.run\n          config: readSourceConfig(PACKAGE)\n\n        builder.build(filetree.data())\n        .then (pkg) ->\n          packager.standAlone pkg\n        .then ({html}) ->\n          sandbox.document.open()\n          sandbox.document.write(html)\n          sandbox.document.close()\n\n      save: (params) ->\n        commit(params)\n        .then ->\n          publish(params)        \n\n      test: ({builder, filetree}) ->\n        sandbox = Runner.run\n          config: readSourceConfig(PACKAGE)\n\n        builder.build(filetree.data())\n        .then (pkg) ->\n          packager.testScripts(pkg)\n        .then (testScripts) ->\n          html = TestRunner.html(testScripts)\n          sandbox.document.open()\n          sandbox.document.write(html)\n          sandbox.document.close()\n\n      load: ({filetree, repository}) ->\n        # Decode all content in place\n        processDirectory = (items) ->\n          items.each (item) ->\n            return item unless item.content\n    \n            item.content = Base64.decode(item.content)\n            item.encoding = \"raw\"\n    \n        repository.latestContent()\n        .then (results) ->\n          files = processDirectory results\n          filetree.load files\n\n    module.exports = Actions\n",
      "type": "blob"
    },
    "source/builder.coffee.md": {
      "path": "source/builder.coffee.md",
      "mode": "100644",
      "content": "Builder\n=======\n\nThe builder knows how to compile a source tree or individual files into various\nbuild products.\n\nThis should be extracted to a separate library eventually.\n\nDependencies\n------------\n\nThis guy helps package our app and manage dependencies.\n\n    packager = require('./packager')()\n    {readSourceConfig} = require('./util')\n\nHelpers\n-------\n\n`arrayToHash` converts an array of fileData objects into an object where each\nfile's path is a key and the fileData is the object.\n\n    arrayToHash = (array) ->\n      array.eachWithObject {}, (file, hash) ->\n        hash[file.path] = file\n\n`stripMarkdown` converts a literate file into pure code for compilation or execution.\n\n    stripMarkdown = (content) ->\n      content.split(\"\\n\").map (line) ->\n        if match = (/^([ ]{4}|\\t)/).exec line\n          line[match[0].length..]\n        else\n          \"\"\n      .join(\"\\n\")\n\n`compileTemplate` compiles a haml file into a HAMLjr program.\n\n    compileTemplate = (source, name=\"test\") ->\n      program = HAMLjr.compile source,\n        compiler: CoffeeScript\n\n      \"module.exports = #{program};\"\n\n`compileStyl` compiles a styl file into css.\n\n    compileStyl = (source) ->\n      styleContent = styl(source, whitespace: true).toString()\n      \n      \"module.exports = #{JSON.stringify(styleContent)}\"\n\n`compileFile` take a fileData and returns a buildData. A buildData has a `path`,\nand properties for what type of content was built.\n\nTODO: Allow for files to generate docs and code at the same time.\n\n    compileFile = ({path, content}) ->\n      [name, extension] = [path.withoutExtension(), path.extension()]\n      \n      result =\n        switch extension\n          when \"js\"\n            code: content\n          when \"coffee\"\n            code: CoffeeScript.compile(content)\n          when \"haml\"\n            code: compileTemplate(content, name)\n          when \"styl\"\n            code: compileStyl(content)\n          when \"md\"\n            # Separate out code and call compile again\n            compileFile\n              path: name\n              content: stripMarkdown(content)\n          else\n            {}\n    \n      Object.defaults result,\n        name: name\n        extension: extension\n\n      Object.extend result,\n        path: path\n\nBuilder\n-------\n\nThe builder instance.\n\nTODO: Extract this whole duder to a separate component.\n\nTODO: Standardize interface to use promises.\n\nTODO: Allow configuration of builder instances, adding additional compilers,\npostprocessors, etc.\n\n    Builder = ->\n      build = (fileData) ->    \n        results = fileData.map ({path, content}) ->\n          try\n            # TODO: Separate out tests\n    \n            compileFile\n              path: path\n              content: content\n          catch {location, message}\n            if location?\n              message = \"Error on line #{location.first_line + 1}: #{message}\"\n    \n            error: \"#{path} - #{message}\"\n            \n        [errors, data] = results.partition (result) -> result.error\n        \n        if errors.length\n          Deferred().reject(errors.map (e) -> e.error)\n        else\n          Deferred().resolve(data)\n    \n      postProcessors = []\n      \n      addPostProcessor: (fn) ->\n        postProcessors.push fn\n\nCompile and build a tree of file data into a distribution. The distribution should\ninclude source files, compiled files, and documentation.\n\n      build: (fileData) ->\n        build(fileData)\n        .then (items) ->\n          results = []\n\n          items.eachWithObject results, (item, hash) ->\n            if item.code\n              results.push item\n            else\n              # Do nothing, we don't know about this item\n\n          results = results.map (item) ->\n            path: item.name\n            content: item.code\n            type: \"blob\"\n      \n          # TODO: We should be able to put a lot of this into postProcessors\n      \n          source = arrayToHash(fileData)\n      \n          config = readSourceConfig(source: source)\n          \n          # TODO: Robustify bundled dependencies\n          # Right now we're always loading them from remote urls during the\n          # build step. The default http caching is probably fine to speed this\n          # up, but we may want to look into keeping our own cache during dev\n          # in addition to using the package's existing dependencies rather\n          # than always updating\n          dependencies = config.dependencies or {}\n          \n          packager.collectDependencies(dependencies)\n          .then (bundledDependencies) ->\n            postProcessors.pipeline\n              version: config.version\n              source: source\n              distribution: arrayToHash(results)\n              entryPoint: config.entryPoint or \"main\"\n              dependencies: bundledDependencies\n              remoteDependencies: config.remoteDependencies\n\n    module.exports = Builder\n",
      "type": "blob"
    },
    "source/deferred.coffee.md": {
      "path": "source/deferred.coffee.md",
      "mode": "100644",
      "content": "Use jQuery.Deferred to implement deferreds, but\nstay insulated by not blasting the $ all over our code\nthat doesn't really depend on jQuery\nThis let's us swap our our Deferred provider more easily later.\n\n    global.Deferred = $.Deferred\n\nA helper to return a promise that may be resolved or rejected by the passed\ncode block.\n\n    withDeferrence = (fn) ->\n      deferred = Deferred()\n    \n      # TODO: This try catch may be useless from deferring the fn\n      try\n        fn.defer(deferred)\n      catch e\n        deferred.reject(e)\n    \n      return deferred.promise()\n\nA deferred encapsulating a confirm dialog.\n\n    Deferred.Confirm = (message) ->\n      withDeferrence (deferred) ->\n        if window.confirm(message)\n          deferred.resolve()\n        else\n          deferred.reject()\n\nA deferred that may present a confirm dialog, but only if a certain condition is\nmet.\n\n    Deferred.ConfirmIf = (flag, message) ->\n      if flag\n        return Deferred.Confirm(message)\n      else\n        withDeferrence (deferred) ->\n          deferred.resolve()\n\nA deferred that encapsulates a conditional execution of a block that returns a\npromise. If the condition is met the promise returning block is executed,\notherwise the deferred is marked as resolved and the block is not executed.\n\n    Deferred.ExecuteIf = (flag, callback) ->\n      withDeferrence (deferred) ->\n        if flag\n          callback().then deferred.resolve\n        else\n          deferred.resolve()\n",
      "type": "blob"
    },
    "source/duct_tape.coffee.md": {
      "path": "source/duct_tape.coffee.md",
      "mode": "100644",
      "content": "Here we have simple extension and utility methods that should be moved into our framework's environment libraries.\n\n`String#dasherize` should be moved into inflecta.\n\nConvert a string with spaces and mixed case into all lower case with spaces replaced with dashes. This is the style that Github branch names are commonly in.\n\n    String::dasherize = ->\n      @trim()\n        .replace(/\\s+/g, \"-\")\n        .toLowerCase()\n\n`CSON` parses CoffeeScript object literals. This is a big hack, but can be \nformalized later if it proves useful.\n\nAnother downside is that it depends on the CoffeeScript compiler when it should\nbe a simple parser of its own.\n\n    global.CSON =\n      parse: (source) ->\n        Function(\"return #{CoffeeScript.compile(source, bare: true)}\")()\n\nThis really needs to be improved. To do it correctly we'd need to detect \nobject/array values and indent while moving them to separate lines. Single\nvalues would exist without newlines or indentation. CSON.stringify would be\ncalled recursively.\n\nThe current hack of using JSON works because JSON is valid CSON.\n\n      stringify: (object) ->\n        representation = JSON.parse(JSON.stringify(obj))\n\n        Object.keys(representation).map (key) ->\n          value = representation[key]\n          \"#{key}: #{JSON.stringify(value)}\"\n        .join(\"\\n\")\n        \nAdds a `render` helper method to HAMLjr. This should work it's way back into the\nHAMLjr runtime.\n\n`render` Looks up a template and renders it with the given object.\n\n    HAMLjr.render = (templateName, object) ->\n      templates = HAMLjr.templates\n      template = templates[templateName] or templates[\"templates/#{templateName}\"]\n\n      if template\n        template(object)\n      else\n        throw \"Could not find template named #{templateName}\"\n",
      "type": "blob"
    },
    "source/file.coffee.md": {
      "path": "source/file.coffee.md",
      "mode": "100644",
      "content": "The `File` model represents a file in a file system. It is populated by data\nreturned from the Github API.\n\n    File = (I={}) ->\n      I.path ?= I.filename\n      I.filename ?= I.path.split(\"/\").last()\n    \n      self = Model(I).observeAll()\n    \n      self.extend\n      \nThe extension is the last part of the filename after the `.`, for example\n`\"coffee\"` for a file named `\"main.coffee\"` or `\"haml\"` for a file named\n`\"filetree.haml\"`.\n      \n        extension: ->\n          self.filename().extension()\n\nThe `mode` of the file is what editor mode to use for our text editor.\n\n        mode: ->\n          switch extension = self.extension()\n            when \"js\"\n              \"javascript\"\n            when \"md\" # TODO: See about nested markdown code modes for .haml.md, .js.md, and .coffee.md\n              \"markdown\"\n            when \"cson\"\n              \"coffee\"\n            when \"\"\n              \"text\"\n            else\n              extension\n\nModified tracks whether the file has been changed since it was created.\n\n        modified: Observable(false)\n\nThe `displayName` is how the file appears in views.\n\n        displayName: Observable(self.path())\n\nWhen our content changes we assume we are modified. In the future we may want to\ntrack the original content and compare with that to get a more accurate modified\nstatus.\n\n      self.content.observe ->\n        self.modified(true)\n\nWhen our modified state changes we adjust the file name to provide a visual\nindication.\n\n      self.modified.observe (modified) ->\n        if modified\n          self.displayName(\"*#{self.path()}\")\n        else\n          self.displayName(self.path())\n    \n      return self\n\nExport\n\n    module.exports = File\n",
      "type": "blob"
    },
    "source/filetree.coffee.md": {
      "path": "source/filetree.coffee.md",
      "mode": "100644",
      "content": "    File = require(\"./file\")\n\nThe `Filetree` model represents a tree of files.\n\n    Filetree = (I={}) ->\n      Object.defaults I,\n        files: []\n    \n      self = Model(I).observeAll()\n\nThe `selectedFile` observable keeps people up to date on what file has been\nselected.\n\n      self.attrObservable \"selectedFile\"\n    \n      self.extend\n        \nLoad files either from an array of file data objects or from an object with\npaths as keys and file data objects as values.\n\nThe files are sorted by name after loading.\n\nTODO: Always maintain the files in a sorted list using some kind of sorted\nobservable.\n\n        load: (fileData) ->\n          if Array.isArray(fileData)\n            files = fileData.sort (a, b) ->\n              if a.path < b.path\n                -1\n              else if b.path < a.path\n                1\n              else\n                0\n            .map File\n    \n          else\n            files = Object.keys(fileData).sort().map (path) ->\n              File fileData[path]\n    \n          self.files(files)\n\nThe `data` method returns an array of file data objects that is compatible with\nthe github tree api.\n\nThe objects have a `path`, `content`, `type`, and `mode`.\n\n        data: ->\n          self.files.map (file) ->\n            path: file.path()\n            mode: \"100644\"\n            content: file.content()\n            type: \"blob\"\n\nThe filetree `hasUnsavedChanges` if any file in the tree is modified.\n\n        hasUnsavedChanges: ->\n          self.files().select (file) ->\n            file.modified()\n          .length\n\nMarking the filetree as saved resets the modification status of each file.\n\nTODO: There can be race conditions since the save is async.\n\nTODO: Use git trees and content shas to robustly manage changed state.\n\n        markSaved: ->\n          self.files().each (file) ->\n            file.modified(false)\n    \n      return self\n\nExport\n\n    module.exports = Filetree\n",
      "type": "blob"
    },
    "source/github_auth.coffee.md": {
      "path": "source/github_auth.coffee.md",
      "mode": "100644",
      "content": "A helper to capture client side authorization codes and send them to our gatekeeper\nserver to authenticate them with our app secret key.\n\nReturns a promise that will contain the auth token, or an error.\n\n    GithubAuth = ->\n\nIf the url contains a querystring parameter `code` then we send it to our auth\nserver to get the OAuth token.\n\n      if code = window.location.href.match(/\\?code=(.*)/)?[1]\n        $.getJSON(\"https://hamljr-auth.herokuapp.com/authenticate/#{code}\")\n        .then (data) ->\n          if token = data.token\n            localStorage.authToken = token\n          else\n            if localStorage.authToken\n              Deferred().resolve(localStorage.authToken)\n            else\n              Deferred().reject(\"Failed to get authorization from server and no token in local storage\")\n      else\n\nWe also check localStorage for our auth token.\n\n        if localStorage.authToken\n          Deferred().resolve(localStorage.authToken)\n        else\n          Deferred().reject(\"No token in local storage\")\n\n    module.exports = GithubAuth\n",
      "type": "blob"
    },
    "source/packager.coffee.md": {
      "path": "source/packager.coffee.md",
      "mode": "100644",
      "content": "Packager\n========\n\nThe main responsibilities will be bundling dependencies, and creating the\npackage.\n\n    Packager = ->\n      collectDependencies: (dependencies) ->\n        names = Object.keys(dependencies)\n\n        $.when.apply(null, names.map (name) ->\n          value = dependencies[name]\n\n          if typeof value is \"string\"\n\nIf our string is an absolute URL then we assume that the server is CORS enabled\nand we can make a cross origin request to collect the JSON data.\n\n            if value.startsWith(\"http\")\n              $.getJSON(value)\n            else\n\nHandle a Github repo dependency. Something like `STRd6/issues:master`. This uses\nJSONP to load the package from the gh-pages branch of the given repo.\n\n`STRd6/issues:master` will be accessible at `http://strd6.github.io/issues/master.jsonp`.\nThe callback is the same as the repo info string: `window[\"STRd6/issues:master\"](... JSON DATA ...)`\n\nWhy all the madness? Github pages doesn't allow CORS right now, so we need to use\nthe JSONP hack to work around it. Because the files are static we can't allow the\nserver to generate a wrapper in response to our query string param so we need to\nwork out a unique one per file ahead of time. The `<user>/<repo>:<ref>` string is \nunique for all our packages so we use it to determine the URL and name callback.\n\n              if (match = value.match(/([^\\/]*)\\/([^\\:]*)\\:(.*)/))\n                [callback, user, repo, branch] = match\n                \n                user = user.toLowerCase()\n                \n                $.ajax\n                  url: \"http://#{user}.github.io/#{repo}/#{branch}.jsonp\"\n                  dataType: \"jsonp\"\n                  jsonpCallback: callback\n                  cache: true\n              else\n                reject \"\"\"\n                  Failed to parse repository info string #{value}, be sure it's in the \n                  form `<user>/<repo>:<ref>` for example: `STRd6/issues:master`\n                  or `STRd6/editor:v0.9.1`\n                \"\"\"\n          else\n            reject \"Can only handle url string dependencies right now\"\n        ).then (results...) ->\n          # WTF: jQuery.when behaves differently for one argument than it does for\n          # two or more.\n          if names.length is 1\n            results = [results]\n          \n          bundledDependencies = {}\n\n          names.each (name, i) ->\n            bundledDependencies[name] = results[i][0]\n\n          return bundledDependencies\n\nCreate the standalone components of this package. An html page that loads the \nmain entry point for demonstration purposes and a json package that can be\nused as a dependency in other packages.\n\n      standAlone: (pkg) ->\n        {source, distribution, entryPoint} = pkg\n\n        html = \"\"\"\n          <!doctype html>\n          <head>\n          <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n          #{dependencyScripts(pkg.remoteDependencies)}\n          </head>\n          <body>\n          <script>\n          #{packageWrapper(pkg, \"require('./#{entryPoint}')\")}\n          <\\/script>\n          </body>\n          </html>\n        \"\"\"\n\n        json = JSON.stringify(pkg, null, 2)\n\n        html: html\n        js: program(pkg)\n        json: json\n        jsonp: jsonpWrapper(pkg.repository, json)\n\nGenerates a standalone page for testing the app.\n\n      testScripts: (pkg) ->\n        {distribution} = pkg\n\n        testProgram = Object.keys(distribution).select (path) ->\n          path.match /test\\//\n        .map (testPath) ->\n          \"require('./#{testPath}')\"\n        .join \"\\n\"\n        \n        \"\"\"\n          #{dependencyScripts(pkg.remoteDependencies)}\n          <script>\n            #{packageWrapper(pkg, testProgram)}\n          <\\/script>\n        \"\"\"\n\n    module.exports = Packager\n\nHelpers\n-------\n\nCreate a rejected deferred with the given message.\n\n    reject = (message) ->\n      Deferred().reject([message])\n\n`makeScript` returns a string representation of a script tag. Don't use this\nwith tons of stuff stuck inside as html, it gets messed up. Using with src is\nfine though.\n\n    makeScript = (attrs) ->\n      $(\"<script>\", attrs).prop('outerHTML')\n\n`dependencyScripts` returns a string containing the script tags that are\nthe dependencies of this build.\n\n    dependencyScripts = (remoteDependencies=[]) ->\n      remoteDependencies.map (src) ->\n        makeScript\n          class: \"env\"\n          src: src\n\n      .join(\"\\n\")\n\nA standalone JS program for the package. Does not use `require` and is only\nsuitable for script style dependencies.\n\n    program = ({distribution, entryPoint}) ->\n      if main = distribution[entryPoint]\n        return main.content\n      else\n        # TODO: We should emit some kind of user-visible warning\n        console.warn \"Entry point #{entryPoint} not found.\"\n        \n        return \"\"\n\nWraps the given data in a JSONP function wrapper. This allows us to host our\npackages on Github pages and get around any same origin issues by using JSONP.\n\n    jsonpWrapper = (repository, data) ->\n      \"\"\"\n        window[\"#{repository.full_name}:#{repository.branch}\"](#{data});\n      \"\"\"\n\nWrap code in a closure that provides the package and a require function. This\ncan be used for generating standalone HTML pages, scripts, and tests.\n\n    packageWrapper = (pkg, code) ->\n      \"\"\"\n        ;(function(PACKAGE) {\n        require = Require.generateFor(PACKAGE)\n        #{code}\n        })(#{JSON.stringify(pkg, null, 2)});\n      \"\"\"\n",
      "type": "blob"
    },
    "source/runner.coffee.md": {
      "path": "source/runner.coffee.md",
      "mode": "100644",
      "content": "Runner manages running apps in sandboxed windows and passing messages back and \nforth from the parent to the running instances.\n\nWe keep a list of running windows so we can hot-update them when we modify our\nown code.\n\nOne cool example use is if you are modifying your css you can run several \ninstances of your app and navigate to different states. Then you can see in real\ntime how the css changes affect each one.\n\n    runningWindows = []\n\n    Runner =\n      run: ({config}) ->\n        sandbox = Sandbox\n          width: config.width\n          height: config.height\n\n        runningWindows.push sandbox\n\n        return sandbox\n\n      hotReloadCSS: (css, path) ->      \n        runningWindows = runningWindows.select (window) ->\n          return false if window.closed\n                    \n          # TODO: We're assuming only one style in the body\n          # which is reasonable in most cases, but we may want\n          # to scope it by the path of the specific css file\n          # to handle a wider range of situations\n          $(window.document).find(\"body style:eq(0)\").html(css)\n          \n          return true\n\n    module.exports = Runner\n",
      "type": "blob"
    },
    "source/runtime.coffee.md": {
      "path": "source/runtime.coffee.md",
      "mode": "100644",
      "content": "The runtime holds utilities to assist with an apps running environment.\n\nIt should me moved into it's own component one day.\n\n    Runtime = (pkg) ->\n\nReturns the node that is the parent of the script element that contains the code\nthat calls this function. If `document.write` has been called before this then the\nresults may not be accurate. Therefore be sure to call currentNode before\nwriting anything to the document.\n\n      currentNode = ->\n        target = document.documentElement\n      \n        while (target.childNodes.length and target.lastChild.nodeType == 1)\n          target = target.lastChild\n      \n        return target.parentNode\n\nDisplay a promo in the console linking back to the creator of this app.\n\n      promo = ->\n        console.log(\"%c You should meet my creator #{pkg.progenitor.url}\", \"\"\"\n          background: #000; \n          color: white; \n          font-size: 2em;\n          line-height: 2em;\n          padding: 10px 100px;\n          margin-bottom: 1em;\n          text-shadow: \n            0 0 0.05em #fff, \n            0 0 0.1em #fff, \n            0 0 0.15em #fff, \n            0 0 0.2em #ff00de, \n            0 0 0.35em #ff00de, \n            0 0 0.4em #ff00de, \n            0 0 0.5em #ff00de, \n            0 0 0.75em #ff00de;'\n        \"\"\")\n\nCall on start to boot up the runtime, get the root node, add styles, display a \npromo.\n\n      boot: ->\n        root = currentNode()\n\n        promo()\n\nReturns the root element, where the app should append all of the elements it\ncreates.\n\n        return root\n        \n      applyStyleSheet: (root, name) ->\n        styleNode = document.createElement(\"style\")\n        styleNode.innerHTML = require(name)\n        styleNode.className = name\n        \n        root.appendChild(styleNode)\n\nExport\n\n    module.exports = Runtime\n",
      "type": "blob"
    },
    "source/text_editor.coffee.md": {
      "path": "source/text_editor.coffee.md",
      "mode": "100644",
      "content": "The `TextEditor` is a model for editing a text file. Currently it uses the Ace\neditor, but we may switch in the future. All the editor specific things live in\nhere.\n\n    TextEditor = (I) ->\n      Object.reverseMerge I,\n        mode: \"coffee\"\n        text: \"\"\n\n      self = Model(I)\n\nWe can't use ace on a div not in the DOM so we need to be sure to pass one in.\n\n      el = I.el\n\nWe can't serialize DOM elements so we need to be sure to delete it.\n\n      delete I.el\n\nHere we create and configure the Ace text editor.\n\nTODO: Load these options from a preferences somewhere.\n\n      editor = ace.edit(el)\n      editor.setFontSize(\"16px\")\n      editor.setTheme(\"ace/theme/chrome\")\n      editor.getSession().setUseWorker(false)\n      editor.getSession().setMode(\"ace/mode/#{I.mode}\")\n      editor.getSession().setUseSoftTabs(true)\n      editor.getSession().setTabSize(2)\n\n`reset` Sets the content of the editor to the given content and also resets any\ncursor position or selection.\n\n      reset = (content=\"\") ->\n        editor.setValue(content)\n        editor.moveCursorTo(0, 0)\n        editor.session.selection.clearSelection()\n    \n      reset(I.text)\n\nOur text attribute is observable so clients can track changes.\n\n      self.attrObservable \"text\"\n\nWe modify our text by listening to change events from Ace.\n\nTODO: Remove these `updating` hacks.\n\n      updating = false\n      editor.getSession().on 'change', ->\n        updating = true\n        self.text(editor.getValue())\n        updating = false\n\nWe also observe any changes to `text` ourselves to stay up to date with outside\nmodifications. Its a bi-directional binding.\n\n      self.text.observe (newValue) ->\n        unless updating\n          reset(newValue)\n\nWe expose some properties and methods.\n\n      self.extend\n        el: el\n        editor: editor\n        reset: reset\n    \n      return self\n\n    module.exports = TextEditor\n",
      "type": "blob"
    },
    "source/util.coffee.md": {
      "path": "source/util.coffee.md",
      "mode": "100644",
      "content": "\n    require \"./duct_tape\" # TODO: Only for CSON, which should be moved into Tempest\n\nA collection of shared utilities\n\n    Util =\n\nRead the config for the package from the package source.\n\n      readSourceConfig: (pkg=PACKAGE) ->\n        if configData = pkg.source[\"pixie.cson\"]?.content\n          CSON.parse(configData)\n        else if configData = pkg.source[\"pixie.json\"]?.content\n          JSON.parse(configData)\n        else\n          {}\n\n    module.exports = Util\n",
      "type": "blob"
    },
    "style.styl": {
      "path": "style.styl",
      "mode": "100644",
      "content": "html, body\n  margin: 0\n  height: 100%\n\nbody\n  font-family: \"HelveticaNeue-Light\", \"Helvetica Neue Light\", \"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", sans-serif\n  font-weight: 300\n\n.main\n  position: relative\n  padding-top: 40px\n  padding-left: 200px\n  padding-bottom: 100px\n  box-sizing: border-box\n  height: 100%\n\n.editor-wrap\n  background-color: white\n  width: 100%\n  height: 100%\n  position: relative\n\n  & > div\n    position: absolute\n    top: 0\n    left: 0\n    right: 0\n    bottom: 0\n\n.filetree\n  margin: 0\n  padding: 0\n  width: 200px\n  position: absolute\n  left: 0\n  top: 40px\n  z-index: 2\n\n  li\n    list-style-type: none\n    padding-left: 1em\n    position: relative\n    whitespace: nowrap\n\n    .delete\n      display: none\n      position: absolute\n      right: 0\n      top: 0\n\n    &:hover\n      background-color: lightyellow\n\n      .delete\n        display: inline-block\n\n.actions\n  position: absolute\n  top: 0\n  left: 200px\n\n.repo_info\n  box-sizing: border-box\n  position: absolute\n  top: 0\n  left: 0\n  padding: 0.25em 1em\n  width: 200px\n  overflow: hidden\n  border-bottom: 1px solid black\n  height: 40px\n  font-size: 0.8em\n\n.console-wrap\n  box-sizing: border-box\n  position: absolute\n  bottom: 0\n  left: 0\n  right: 0\n  padding-left: 200px\n  height: 100px\n  width: 100%\n  margin: 0\n\n  .errors\n    box-sizing: border-box\n    border-top: 1px solid black\n    color: red\n\n.status\n  top: 0\n  right: 0\n  position: absolute\n",
      "type": "blob"
    },
    "templates/actions.haml.md": {
      "path": "templates/actions.haml.md",
      "mode": "100644",
      "content": "The actions bar holds several buttons that can be pressed to perform actions in\nthe editor.\n\n    .actions\n      - actions = @actions\n\nRender a series of buttons, one for each action.\n\n      - Object.keys(actions).each (name) ->\n        %button\n          = name.titleize()\n\nIn our click handler we don't pass any event data to the action.\n\n          - on \"click\", ->\n            - actions[name]()\n\nThe issues selector is also rendered in the actions bar.\n\n      = HAMLjr.render \"issues\", @issues\n",
      "type": "blob"
    },
    "templates/editor.haml.md": {
      "path": "templates/editor.haml.md",
      "mode": "100644",
      "content": "The main editor template renders all the other sub-templates.\n\n    .main\n      = HAMLjr.render \"actions\", actions: @actions, issues: @issues\n      = HAMLjr.render \"filetree\", @filetree\n      = HAMLjr.render \"notifications\", @notifications\n      = HAMLjr.render \"repo_info\", @repository\n      = HAMLjr.render \"github_status\", @github\n",
      "type": "blob"
    },
    "templates/filetree.haml.md": {
      "path": "templates/filetree.haml.md",
      "mode": "100644",
      "content": "Render a list of files as a filetree.\n\n    %ul.filetree\n      - selectedFile = @selectedFile\n      - files = @files\n      - each files, (file) ->\n        %li= file.displayName\n          - on \"click\", (e) -> \n            - selectedFile(file) if $(e.target).is('li')\n          .delete\n            - on \"click\", -> files.remove(file) if confirm(\"Delete #{file.path()}?\")\n            X\n",
      "type": "blob"
    },
    "templates/github_status.haml.md": {
      "path": "templates/github_status.haml.md",
      "mode": "100644",
      "content": "\nDisplay information about the current Github api session.\n\n    .status\n      - github = this\n      - with @lastRequest, ->\n        %div\n          - if @getAllResponseHeaders and @getAllResponseHeaders().match(/X-RateLimit-Limit: 5000/)\n            Authenticated Scopes:\n            = @getResponseHeader(\"X-OAuth-Scopes\")\n            %br\n            Rate Limit Remaining:\n            = @getResponseHeader(\"X-RateLimit-Remaining\")\n            = \" / 5000\"\n          - else\n            %button Auth\n              - on \"click\", ->\n                - window.location = github.authorizationUrl(\"bc46af967c926ba4ff87\", \"gist,repo,user:email\")\n",
      "type": "blob"
    },
    "templates/repo_info.haml.md": {
      "path": "templates/repo_info.haml.md",
      "mode": "100644",
      "content": "Display some info about the current repository\n\n    .repo_info\n      - with this, ->\n        %div\n          = @full_name\n          :\n          = @branch\n",
      "type": "blob"
    },
    "templates/text_editor.haml.md": {
      "path": "templates/text_editor.haml.md",
      "mode": "100644",
      "content": "A simple wrap to hold a text editor.\n\n    .editor-wrap\n      .editor\n",
      "type": "blob"
    },
    "test/another_test.coffee.md": {
      "path": "test/another_test.coffee.md",
      "mode": "100644",
      "content": "Testing that multiple test files work.\n\n    describe \"editor\", ->\n      it \"should run both files\", ->\n        assert true\n",
      "type": "blob"
    },
    "test/test.coffee.md": {
      "path": "test/test.coffee.md",
      "mode": "100644",
      "content": "Starting with just an assert true to test that testing works at all.\n\n    describe \"editor\", ->\n      it \"should test things\", ->\n        assert true\n",
      "type": "blob"
    },
    "test/util.coffee.md": {
      "path": "test/util.coffee.md",
      "mode": "100644",
      "content": "    Util = require \"../source/util\"\n\n    describe \"Util\", ->\n      it \"should allow reading of the source config\", ->\n        assert Util.readSourceConfig(PACKAGE)\n",
      "type": "blob"
    }
  },
  "distribution": {
    "main": {
      "path": "main",
      "content": "(function() {\n  var $root, Actions, Builder, File, Filetree, Issue, Issues, Runner, Runtime, TextEditor, actions, builder, classicError, closeOpenEditors, confirmUnsaved, errors, files, filetree, github, hotReloadCSS, issues, issuesTemplate, notifications, notify, packager, readSourceConfig, repository, rootNode, runtime, templates, _base, _ref, _ref1, _ref2,\n    __slice = [].slice;\n\n  files = PACKAGE.source;\n\n  global.Sandbox = require('sandbox');\n\n  require(\"./source/duct_tape\");\n\n  require(\"./source/deferred\");\n\n  github = require(\"github\")(require(\"./source/github_auth\")());\n\n  templates = (HAMLjr.templates || (HAMLjr.templates = {}));\n\n  [\"actions\", \"editor\", \"filetree\", \"github_status\", \"text_editor\", \"repo_info\"].each(function(name) {\n    var template;\n    template = require(\"./templates/\" + name);\n    if (typeof template === \"function\") {\n      return templates[name] = template;\n    }\n  });\n\n  Actions = require(\"./source/actions\");\n\n  Builder = require(\"./source/builder\");\n\n  Runner = require(\"./source/runner\");\n\n  Runtime = require(\"./source/runtime\");\n\n  Filetree = require(\"./source/filetree\");\n\n  File = require(\"./source/file\");\n\n  TextEditor = require(\"./source/text_editor\");\n\n  readSourceConfig = require(\"./source/util\").readSourceConfig;\n\n  packager = require(\"./source/packager\")();\n\n  notifications = require(\"notifications\")();\n\n  templates.notifications = notifications.template;\n\n  classicError = notifications.classicError, notify = notifications.notify, errors = notifications.errors;\n\n  runtime = Runtime(PACKAGE);\n\n  rootNode = runtime.boot();\n\n  try {\n    runtime.applyStyleSheet(rootNode, '/style');\n  } catch (_error) {}\n\n  $root = $(rootNode);\n\n  _ref = require(\"issues\"), (_ref1 = _ref.models, Issue = _ref1.Issue, Issues = _ref1.Issues), (_ref2 = _ref.templates, issuesTemplate = _ref2.issues);\n\n  templates[\"issues\"] = issuesTemplate;\n\n  issues = Issues();\n\n  repository = Observable();\n\n  repository.observe(function(repository) {\n    issues.repository = repository;\n    repository.pullRequests().then(issues.reset);\n    return notify(\"Loaded repository: \" + (repository.full_name()));\n  });\n\n  (_base = PACKAGE.repository).url || (_base.url = \"repos/\" + PACKAGE.repository.full_name);\n\n  repository(github.Repository(PACKAGE.repository));\n\n  builder = Builder();\n\n  confirmUnsaved = function() {\n    return Deferred.ConfirmIf(filetree.hasUnsavedChanges(), \"You will lose unsaved changes in your current branch, continue?\");\n  };\n\n  builder.addPostProcessor(function(pkg) {\n    pkg.repository = repository().toJSON();\n    return pkg;\n  });\n\n  builder.addPostProcessor(function(pkg) {\n    pkg.progenitor = {\n      url: \"http://strd6.github.io/editor/\"\n    };\n    return pkg;\n  });\n\n  closeOpenEditors = function() {\n    var root;\n    root = $root.children(\".main\");\n    return root.find(\".editor-wrap\").remove();\n  };\n\n  actions = {\n    save: function() {\n      notify(\"Saving...\");\n      return Actions.save({\n        repository: repository(),\n        fileData: filetree.data(),\n        builder: builder\n      }).then(function() {\n        filetree.markSaved();\n        return notify(\"Saved and published!\");\n      }).fail(function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return errors(args);\n      });\n    },\n    run: function() {\n      return Actions.run({\n        builder: builder,\n        filetree: filetree\n      }).fail(errors);\n    },\n    test: function() {\n      notify(\"Running tests...\");\n      return Actions.test({\n        builder: builder,\n        filetree: filetree\n      }).fail(errors);\n    },\n    new_file: function() {\n      var file, name;\n      if (name = prompt(\"File Name\", \"newfile.coffee\")) {\n        file = File({\n          filename: name,\n          content: \"\"\n        });\n        filetree.files.push(file);\n        return filetree.selectedFile(file);\n      }\n    },\n    load_repo: function(skipPrompt) {\n      return confirmUnsaved().then(function() {\n        var currentRepositoryName, fullName;\n        currentRepositoryName = repository().full_name();\n        fullName = prompt(\"Github repo\", currentRepositoryName);\n        if (fullName) {\n          return github.repository(fullName).then(repository);\n        } else {\n          return Deferred().reject(\"No repo given\");\n        }\n      }).then(function(repositoryInstance) {\n        notify(\"Loading files...\");\n        return Actions.load({\n          repository: repositoryInstance,\n          filetree: filetree\n        }).then(function() {\n          closeOpenEditors();\n          return notifications.push(\"Loaded\");\n        });\n      }).fail(classicError);\n    },\n    new_feature: function() {\n      var title;\n      if (title = prompt(\"Description\")) {\n        notify(\"Creating feature branch...\");\n        return repository().createPullRequest({\n          title: title\n        }).then(function(data) {\n          var issue;\n          issue = Issue(data);\n          issues.issues.push(issue);\n          issues.silent = true;\n          issues.currentIssue(issue);\n          issues.silent = false;\n          return notifications.push(\"Created!\");\n        }, classicError);\n      }\n    },\n    pull_master: function() {\n      return confirmUnsaved().then(function() {\n        notify(\"Merging in default branch...\");\n        return repository().pullFromBranch();\n      }, classicError).then(function() {\n        var branchName;\n        notifications.push(\"Merged!\");\n        branchName = repository().branch();\n        notifications.push(\"\\nReloading branch \" + branchName + \"...\");\n        return Actions.load({\n          repository: repository(),\n          filetree: filetree\n        }).then(function() {\n          return notifications.push(\"Loaded!\");\n        }).fail(function() {\n          return classicError(\"Error loading \" + (repository().url()));\n        });\n      });\n    },\n    tag_version: function() {\n      notify(\"Building...\");\n      return builder.build(filetree.data()).then(function(pkg) {\n        var version;\n        version = \"v\" + (readSourceConfig(pkg).version);\n        notify(\"Tagging version \" + version + \" ...\");\n        return repository().createRef(\"refs/tags/\" + version).then(function() {\n          return notifications.push(\"Tagged \" + version);\n        }).then(function() {\n          notifications.push(\"\\nPublishing...\");\n          pkg.repository.branch = version;\n          return repository().publish(packager.standAlone(pkg), version);\n        }).then(function() {\n          return notifications.push(\"Published!\");\n        });\n      }).fail(classicError);\n    }\n  };\n\n  filetree = Filetree();\n\n  filetree.load(files);\n\n  filetree.selectedFile.observe(function(file) {\n    var editor, root;\n    root = $root.children(\".main\");\n    root.find(\".editor-wrap\").hide();\n    if (file.editor) {\n      return file.editor.trigger(\"show\");\n    } else {\n      root.append(HAMLjr.render(\"text_editor\"));\n      file.editor = root.find(\".editor-wrap\").last();\n      editor = TextEditor({\n        text: file.content(),\n        el: file.editor.find('.editor').get(0),\n        mode: file.mode()\n      });\n      file.editor.on(\"show\", function() {\n        file.editor.show();\n        return editor.editor.focus();\n      });\n      return editor.text.observe(function(value) {\n        file.content(value);\n        if (file.path().match(/\\.styl$/)) {\n          return hotReloadCSS(file);\n        }\n      });\n    }\n  });\n\n  hotReloadCSS = (function(file) {\n    var css;\n    try {\n      css = styl(file.content(), {\n        whitespace: true\n      }).toString();\n    } catch (_error) {}\n    if (css) {\n      return Runner.hotReloadCSS(css, file.path());\n    }\n  }).debounce(100);\n\n  if (issues != null) {\n    issues.currentIssue.observe(function(issue) {\n      var changeBranch;\n      if (issues.silent) {\n        return;\n      }\n      changeBranch = function(branchName) {\n        var previousBranch;\n        previousBranch = repository().branch();\n        return confirmUnsaved().then(function() {\n          closeOpenEditors();\n          return repository().switchToBranch(branchName).then(function() {\n            notifications.push(\"\\nLoading branch \" + branchName + \"...\");\n            return Actions.load({\n              repository: repository(),\n              filetree: filetree\n            }).then(function() {\n              return notifications.push(\"Loaded!\");\n            });\n          });\n        }, function() {\n          repository.branch(previousBranch);\n          return classicError(\"Error switching to \" + branchName + \", still on \" + previousBranch);\n        });\n      };\n      if (issue) {\n        notify(issue.fullDescription());\n        return changeBranch(issue.branchName());\n      } else {\n        notify(\"Default branch selected\");\n        return changeBranch(repository().defaultBranch());\n      }\n    });\n  }\n\n  $root.append(HAMLjr.render(\"editor\", {\n    filetree: filetree,\n    actions: actions,\n    notifications: notifications,\n    issues: issues,\n    github: github,\n    repository: repository\n  }));\n\n  window.onbeforeunload = function() {\n    if (filetree.hasUnsavedChanges()) {\n      return \"You have some unsaved changes, if you leave now you will lose your work.\";\n    }\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/actions": {
      "path": "source/actions",
      "content": "(function() {\n  var Actions, Runner, TestRunner, commit, packager, publish, readSourceConfig;\n\n  packager = require(\"./packager\")();\n\n  Runner = require(\"./runner\");\n\n  TestRunner = require(\"test_runner\");\n\n  readSourceConfig = require(\"./util\").readSourceConfig;\n\n  publish = function(_arg) {\n    var builder, fileData, repository;\n    builder = _arg.builder, fileData = _arg.fileData, repository = _arg.repository;\n    return builder.build(fileData).then(function(pkg) {\n      return repository.publish(packager.standAlone(pkg));\n    });\n  };\n\n  commit = function(_arg) {\n    var fileData, message, repository;\n    fileData = _arg.fileData, repository = _arg.repository, message = _arg.message;\n    return repository.commitTree({\n      tree: fileData,\n      message: message\n    });\n  };\n\n  Actions = {\n    run: function(_arg) {\n      var builder, filetree, sandbox;\n      builder = _arg.builder, filetree = _arg.filetree;\n      sandbox = Runner.run({\n        config: readSourceConfig(PACKAGE)\n      });\n      return builder.build(filetree.data()).then(function(pkg) {\n        return packager.standAlone(pkg);\n      }).then(function(_arg1) {\n        var html;\n        html = _arg1.html;\n        sandbox.document.open();\n        sandbox.document.write(html);\n        return sandbox.document.close();\n      });\n    },\n    save: function(params) {\n      return commit(params).then(function() {\n        return publish(params);\n      });\n    },\n    test: function(_arg) {\n      var builder, filetree, sandbox;\n      builder = _arg.builder, filetree = _arg.filetree;\n      sandbox = Runner.run({\n        config: readSourceConfig(PACKAGE)\n      });\n      return builder.build(filetree.data()).then(function(pkg) {\n        return packager.testScripts(pkg);\n      }).then(function(testScripts) {\n        var html;\n        html = TestRunner.html(testScripts);\n        sandbox.document.open();\n        sandbox.document.write(html);\n        return sandbox.document.close();\n      });\n    },\n    load: function(_arg) {\n      var filetree, processDirectory, repository;\n      filetree = _arg.filetree, repository = _arg.repository;\n      processDirectory = function(items) {\n        return items.each(function(item) {\n          if (!item.content) {\n            return item;\n          }\n          item.content = Base64.decode(item.content);\n          return item.encoding = \"raw\";\n        });\n      };\n      return repository.latestContent().then(function(results) {\n        var files;\n        files = processDirectory(results);\n        return filetree.load(files);\n      });\n    }\n  };\n\n  module.exports = Actions;\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/builder": {
      "path": "source/builder",
      "content": "(function() {\n  var Builder, arrayToHash, compileFile, compileStyl, compileTemplate, packager, readSourceConfig, stripMarkdown;\n\n  packager = require('./packager')();\n\n  readSourceConfig = require('./util').readSourceConfig;\n\n  arrayToHash = function(array) {\n    return array.eachWithObject({}, function(file, hash) {\n      return hash[file.path] = file;\n    });\n  };\n\n  stripMarkdown = function(content) {\n    return content.split(\"\\n\").map(function(line) {\n      var match;\n      if (match = /^([ ]{4}|\\t)/.exec(line)) {\n        return line.slice(match[0].length);\n      } else {\n        return \"\";\n      }\n    }).join(\"\\n\");\n  };\n\n  compileTemplate = function(source, name) {\n    var program;\n    if (name == null) {\n      name = \"test\";\n    }\n    program = HAMLjr.compile(source, {\n      compiler: CoffeeScript\n    });\n    return \"module.exports = \" + program + \";\";\n  };\n\n  compileStyl = function(source) {\n    var styleContent;\n    styleContent = styl(source, {\n      whitespace: true\n    }).toString();\n    return \"module.exports = \" + (JSON.stringify(styleContent));\n  };\n\n  compileFile = function(_arg) {\n    var content, extension, name, path, result, _ref;\n    path = _arg.path, content = _arg.content;\n    _ref = [path.withoutExtension(), path.extension()], name = _ref[0], extension = _ref[1];\n    result = (function() {\n      switch (extension) {\n        case \"js\":\n          return {\n            code: content\n          };\n        case \"coffee\":\n          return {\n            code: CoffeeScript.compile(content)\n          };\n        case \"haml\":\n          return {\n            code: compileTemplate(content, name)\n          };\n        case \"styl\":\n          return {\n            code: compileStyl(content)\n          };\n        case \"md\":\n          return compileFile({\n            path: name,\n            content: stripMarkdown(content)\n          });\n        default:\n          return {};\n      }\n    })();\n    Object.defaults(result, {\n      name: name,\n      extension: extension\n    });\n    return Object.extend(result, {\n      path: path\n    });\n  };\n\n  Builder = function() {\n    var build, postProcessors;\n    build = function(fileData) {\n      var data, errors, results, _ref;\n      results = fileData.map(function(_arg) {\n        var content, location, message, path;\n        path = _arg.path, content = _arg.content;\n        try {\n          return compileFile({\n            path: path,\n            content: content\n          });\n        } catch (_error) {\n          location = _error.location, message = _error.message;\n          if (location != null) {\n            message = \"Error on line \" + (location.first_line + 1) + \": \" + message;\n          }\n          return {\n            error: \"\" + path + \" - \" + message\n          };\n        }\n      });\n      _ref = results.partition(function(result) {\n        return result.error;\n      }), errors = _ref[0], data = _ref[1];\n      if (errors.length) {\n        return Deferred().reject(errors.map(function(e) {\n          return e.error;\n        }));\n      } else {\n        return Deferred().resolve(data);\n      }\n    };\n    postProcessors = [];\n    return {\n      addPostProcessor: function(fn) {\n        return postProcessors.push(fn);\n      },\n      build: function(fileData) {\n        return build(fileData).then(function(items) {\n          var config, dependencies, results, source;\n          results = [];\n          items.eachWithObject(results, function(item, hash) {\n            if (item.code) {\n              return results.push(item);\n            } else {\n\n            }\n          });\n          results = results.map(function(item) {\n            return {\n              path: item.name,\n              content: item.code,\n              type: \"blob\"\n            };\n          });\n          source = arrayToHash(fileData);\n          config = readSourceConfig({\n            source: source\n          });\n          dependencies = config.dependencies || {};\n          return packager.collectDependencies(dependencies).then(function(bundledDependencies) {\n            return postProcessors.pipeline({\n              version: config.version,\n              source: source,\n              distribution: arrayToHash(results),\n              entryPoint: config.entryPoint || \"main\",\n              dependencies: bundledDependencies,\n              remoteDependencies: config.remoteDependencies\n            });\n          });\n        });\n      }\n    };\n  };\n\n  module.exports = Builder;\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/deferred": {
      "path": "source/deferred",
      "content": "(function() {\n  var withDeferrence;\n\n  global.Deferred = $.Deferred;\n\n  withDeferrence = function(fn) {\n    var deferred, e;\n    deferred = Deferred();\n    try {\n      fn.defer(deferred);\n    } catch (_error) {\n      e = _error;\n      deferred.reject(e);\n    }\n    return deferred.promise();\n  };\n\n  Deferred.Confirm = function(message) {\n    return withDeferrence(function(deferred) {\n      if (window.confirm(message)) {\n        return deferred.resolve();\n      } else {\n        return deferred.reject();\n      }\n    });\n  };\n\n  Deferred.ConfirmIf = function(flag, message) {\n    if (flag) {\n      return Deferred.Confirm(message);\n    } else {\n      return withDeferrence(function(deferred) {\n        return deferred.resolve();\n      });\n    }\n  };\n\n  Deferred.ExecuteIf = function(flag, callback) {\n    return withDeferrence(function(deferred) {\n      if (flag) {\n        return callback().then(deferred.resolve);\n      } else {\n        return deferred.resolve();\n      }\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/duct_tape": {
      "path": "source/duct_tape",
      "content": "(function() {\n  String.prototype.dasherize = function() {\n    return this.trim().replace(/\\s+/g, \"-\").toLowerCase();\n  };\n\n  global.CSON = {\n    parse: function(source) {\n      return Function(\"return \" + (CoffeeScript.compile(source, {\n        bare: true\n      })))();\n    },\n    stringify: function(object) {\n      var representation;\n      representation = JSON.parse(JSON.stringify(obj));\n      return Object.keys(representation).map(function(key) {\n        var value;\n        value = representation[key];\n        return \"\" + key + \": \" + (JSON.stringify(value));\n      }).join(\"\\n\");\n    }\n  };\n\n  HAMLjr.render = function(templateName, object) {\n    var template, templates;\n    templates = HAMLjr.templates;\n    template = templates[templateName] || templates[\"templates/\" + templateName];\n    if (template) {\n      return template(object);\n    } else {\n      throw \"Could not find template named \" + templateName;\n    }\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/file": {
      "path": "source/file",
      "content": "(function() {\n  var File;\n\n  File = function(I) {\n    var self;\n    if (I == null) {\n      I = {};\n    }\n    if (I.path == null) {\n      I.path = I.filename;\n    }\n    if (I.filename == null) {\n      I.filename = I.path.split(\"/\").last();\n    }\n    self = Model(I).observeAll();\n    self.extend({\n      extension: function() {\n        return self.filename().extension();\n      },\n      mode: function() {\n        var extension;\n        switch (extension = self.extension()) {\n          case \"js\":\n            return \"javascript\";\n          case \"md\":\n            return \"markdown\";\n          case \"cson\":\n            return \"coffee\";\n          case \"\":\n            return \"text\";\n          default:\n            return extension;\n        }\n      },\n      modified: Observable(false),\n      displayName: Observable(self.path())\n    });\n    self.content.observe(function() {\n      return self.modified(true);\n    });\n    self.modified.observe(function(modified) {\n      if (modified) {\n        return self.displayName(\"*\" + (self.path()));\n      } else {\n        return self.displayName(self.path());\n      }\n    });\n    return self;\n  };\n\n  module.exports = File;\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/filetree": {
      "path": "source/filetree",
      "content": "(function() {\n  var File, Filetree;\n\n  File = require(\"./file\");\n\n  Filetree = function(I) {\n    var self;\n    if (I == null) {\n      I = {};\n    }\n    Object.defaults(I, {\n      files: []\n    });\n    self = Model(I).observeAll();\n    self.attrObservable(\"selectedFile\");\n    self.extend({\n      load: function(fileData) {\n        var files;\n        if (Array.isArray(fileData)) {\n          files = fileData.sort(function(a, b) {\n            if (a.path < b.path) {\n              return -1;\n            } else if (b.path < a.path) {\n              return 1;\n            } else {\n              return 0;\n            }\n          }).map(File);\n        } else {\n          files = Object.keys(fileData).sort().map(function(path) {\n            return File(fileData[path]);\n          });\n        }\n        return self.files(files);\n      },\n      data: function() {\n        return self.files.map(function(file) {\n          return {\n            path: file.path(),\n            mode: \"100644\",\n            content: file.content(),\n            type: \"blob\"\n          };\n        });\n      },\n      hasUnsavedChanges: function() {\n        return self.files().select(function(file) {\n          return file.modified();\n        }).length;\n      },\n      markSaved: function() {\n        return self.files().each(function(file) {\n          return file.modified(false);\n        });\n      }\n    });\n    return self;\n  };\n\n  module.exports = Filetree;\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/github_auth": {
      "path": "source/github_auth",
      "content": "(function() {\n  var GithubAuth;\n\n  GithubAuth = function() {\n    var code, _ref;\n    if (code = (_ref = window.location.href.match(/\\?code=(.*)/)) != null ? _ref[1] : void 0) {\n      return $.getJSON(\"https://hamljr-auth.herokuapp.com/authenticate/\" + code).then(function(data) {\n        var token;\n        if (token = data.token) {\n          return localStorage.authToken = token;\n        } else {\n          if (localStorage.authToken) {\n            return Deferred().resolve(localStorage.authToken);\n          } else {\n            return Deferred().reject(\"Failed to get authorization from server and no token in local storage\");\n          }\n        }\n      });\n    } else {\n      if (localStorage.authToken) {\n        return Deferred().resolve(localStorage.authToken);\n      } else {\n        return Deferred().reject(\"No token in local storage\");\n      }\n    }\n  };\n\n  module.exports = GithubAuth;\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/packager": {
      "path": "source/packager",
      "content": "(function() {\n  var Packager, dependencyScripts, jsonpWrapper, makeScript, packageWrapper, program, reject,\n    __slice = [].slice;\n\n  Packager = function() {\n    return {\n      collectDependencies: function(dependencies) {\n        var names;\n        names = Object.keys(dependencies);\n        return $.when.apply(null, names.map(function(name) {\n          var branch, callback, match, repo, user, value;\n          value = dependencies[name];\n          if (typeof value === \"string\") {\n            if (value.startsWith(\"http\")) {\n              return $.getJSON(value);\n            } else {\n              if ((match = value.match(/([^\\/]*)\\/([^\\:]*)\\:(.*)/))) {\n                callback = match[0], user = match[1], repo = match[2], branch = match[3];\n                user = user.toLowerCase();\n                return $.ajax({\n                  url: \"http://\" + user + \".github.io/\" + repo + \"/\" + branch + \".jsonp\",\n                  dataType: \"jsonp\",\n                  jsonpCallback: callback,\n                  cache: true\n                });\n              } else {\n                return reject(\"Failed to parse repository info string \" + value + \", be sure it's in the \\nform `<user>/<repo>:<ref>` for example: `STRd6/issues:master`\\nor `STRd6/editor:v0.9.1`\");\n              }\n            }\n          } else {\n            return reject(\"Can only handle url string dependencies right now\");\n          }\n        })).then(function() {\n          var bundledDependencies, results;\n          results = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          if (names.length === 1) {\n            results = [results];\n          }\n          bundledDependencies = {};\n          names.each(function(name, i) {\n            return bundledDependencies[name] = results[i][0];\n          });\n          return bundledDependencies;\n        });\n      },\n      standAlone: function(pkg) {\n        var distribution, entryPoint, html, json, source;\n        source = pkg.source, distribution = pkg.distribution, entryPoint = pkg.entryPoint;\n        html = \"<!doctype html>\\n<head>\\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\\n\" + (dependencyScripts(pkg.remoteDependencies)) + \"\\n</head>\\n<body>\\n<script>\\n\" + (packageWrapper(pkg, \"require('./\" + entryPoint + \"')\")) + \"\\n<\\/script>\\n</body>\\n</html>\";\n        json = JSON.stringify(pkg, null, 2);\n        return {\n          html: html,\n          js: program(pkg),\n          json: json,\n          jsonp: jsonpWrapper(pkg.repository, json)\n        };\n      },\n      testScripts: function(pkg) {\n        var distribution, testProgram;\n        distribution = pkg.distribution;\n        testProgram = Object.keys(distribution).select(function(path) {\n          return path.match(/test\\//);\n        }).map(function(testPath) {\n          return \"require('./\" + testPath + \"')\";\n        }).join(\"\\n\");\n        return \"\" + (dependencyScripts(pkg.remoteDependencies)) + \"\\n<script>\\n  \" + (packageWrapper(pkg, testProgram)) + \"\\n<\\/script>\";\n      }\n    };\n  };\n\n  module.exports = Packager;\n\n  reject = function(message) {\n    return Deferred().reject([message]);\n  };\n\n  makeScript = function(attrs) {\n    return $(\"<script>\", attrs).prop('outerHTML');\n  };\n\n  dependencyScripts = function(remoteDependencies) {\n    if (remoteDependencies == null) {\n      remoteDependencies = [];\n    }\n    return remoteDependencies.map(function(src) {\n      return makeScript({\n        \"class\": \"env\",\n        src: src\n      });\n    }).join(\"\\n\");\n  };\n\n  program = function(_arg) {\n    var distribution, entryPoint, main;\n    distribution = _arg.distribution, entryPoint = _arg.entryPoint;\n    if (main = distribution[entryPoint]) {\n      return main.content;\n    } else {\n      console.warn(\"Entry point \" + entryPoint + \" not found.\");\n      return \"\";\n    }\n  };\n\n  jsonpWrapper = function(repository, data) {\n    return \"window[\\\"\" + repository.full_name + \":\" + repository.branch + \"\\\"](\" + data + \");\";\n  };\n\n  packageWrapper = function(pkg, code) {\n    return \";(function(PACKAGE) {\\nrequire = Require.generateFor(PACKAGE)\\n\" + code + \"\\n})(\" + (JSON.stringify(pkg, null, 2)) + \");\";\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/runner": {
      "path": "source/runner",
      "content": "(function() {\n  var Runner, runningWindows;\n\n  runningWindows = [];\n\n  Runner = {\n    run: function(_arg) {\n      var config, sandbox;\n      config = _arg.config;\n      sandbox = Sandbox({\n        width: config.width,\n        height: config.height\n      });\n      runningWindows.push(sandbox);\n      return sandbox;\n    },\n    hotReloadCSS: function(css, path) {\n      return runningWindows = runningWindows.select(function(window) {\n        if (window.closed) {\n          return false;\n        }\n        $(window.document).find(\"body style:eq(0)\").html(css);\n        return true;\n      });\n    }\n  };\n\n  module.exports = Runner;\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/runtime": {
      "path": "source/runtime",
      "content": "(function() {\n  var Runtime;\n\n  Runtime = function(pkg) {\n    var currentNode, promo;\n    currentNode = function() {\n      var target;\n      target = document.documentElement;\n      while (target.childNodes.length && target.lastChild.nodeType === 1) {\n        target = target.lastChild;\n      }\n      return target.parentNode;\n    };\n    promo = function() {\n      return console.log(\"%c You should meet my creator \" + pkg.progenitor.url, \"background: #000; \\ncolor: white; \\nfont-size: 2em;\\nline-height: 2em;\\npadding: 10px 100px;\\nmargin-bottom: 1em;\\ntext-shadow: \\n  0 0 0.05em #fff, \\n  0 0 0.1em #fff, \\n  0 0 0.15em #fff, \\n  0 0 0.2em #ff00de, \\n  0 0 0.35em #ff00de, \\n  0 0 0.4em #ff00de, \\n  0 0 0.5em #ff00de, \\n  0 0 0.75em #ff00de;'\");\n    };\n    return {\n      boot: function() {\n        var root;\n        root = currentNode();\n        promo();\n        return root;\n      },\n      applyStyleSheet: function(root, name) {\n        var styleNode;\n        styleNode = document.createElement(\"style\");\n        styleNode.innerHTML = require(name);\n        styleNode.className = name;\n        return root.appendChild(styleNode);\n      }\n    };\n  };\n\n  module.exports = Runtime;\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/text_editor": {
      "path": "source/text_editor",
      "content": "(function() {\n  var TextEditor;\n\n  TextEditor = function(I) {\n    var editor, el, reset, self, updating;\n    Object.reverseMerge(I, {\n      mode: \"coffee\",\n      text: \"\"\n    });\n    self = Model(I);\n    el = I.el;\n    delete I.el;\n    editor = ace.edit(el);\n    editor.setFontSize(\"16px\");\n    editor.setTheme(\"ace/theme/chrome\");\n    editor.getSession().setUseWorker(false);\n    editor.getSession().setMode(\"ace/mode/\" + I.mode);\n    editor.getSession().setUseSoftTabs(true);\n    editor.getSession().setTabSize(2);\n    reset = function(content) {\n      if (content == null) {\n        content = \"\";\n      }\n      editor.setValue(content);\n      editor.moveCursorTo(0, 0);\n      return editor.session.selection.clearSelection();\n    };\n    reset(I.text);\n    self.attrObservable(\"text\");\n    updating = false;\n    editor.getSession().on('change', function() {\n      updating = true;\n      self.text(editor.getValue());\n      return updating = false;\n    });\n    self.text.observe(function(newValue) {\n      if (!updating) {\n        return reset(newValue);\n      }\n    });\n    self.extend({\n      el: el,\n      editor: editor,\n      reset: reset\n    });\n    return self;\n  };\n\n  module.exports = TextEditor;\n\n}).call(this);\n",
      "type": "blob"
    },
    "source/util": {
      "path": "source/util",
      "content": "(function() {\n  var Util;\n\n  require(\"./duct_tape\");\n\n  Util = {\n    readSourceConfig: function(pkg) {\n      var configData, _ref, _ref1;\n      if (pkg == null) {\n        pkg = PACKAGE;\n      }\n      if (configData = (_ref = pkg.source[\"pixie.cson\"]) != null ? _ref.content : void 0) {\n        return CSON.parse(configData);\n      } else if (configData = (_ref1 = pkg.source[\"pixie.json\"]) != null ? _ref1.content : void 0) {\n        return JSON.parse(configData);\n      } else {\n        return {};\n      }\n    }\n  };\n\n  module.exports = Util;\n\n}).call(this);\n",
      "type": "blob"
    },
    "style": {
      "path": "style",
      "content": "module.exports = \"html,\\nbody {\\n  margin: 0;\\n  height: 100%;\\n}\\n\\nbody {\\n  font-family: \\\"HelveticaNeue-Light\\\", \\\"Helvetica Neue Light\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, \\\"Lucida Grande\\\", sans-serif;\\n  font-weight: 300;\\n}\\n\\n.main {\\n  position: relative;\\n  padding-top: 40px;\\n  padding-left: 200px;\\n  padding-bottom: 100px;\\n  height: 100%;\\n  -ms-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  -webkit-box-sizing: border-box;\\n  box-sizing: border-box;\\n}\\n\\n.editor-wrap {\\n  background-color: white;\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n}\\n\\n.editor-wrap > div {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n}\\n\\n.filetree {\\n  margin: 0;\\n  padding: 0;\\n  width: 200px;\\n  position: absolute;\\n  left: 0;\\n  top: 40px;\\n  z-index: 2;\\n}\\n\\n.filetree li .delete {\\n  display: none;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n}\\n\\n.filetree li:hover .delete {\\n  display: inline-block;\\n}\\n\\n.filetree li:hover {\\n  background-color: lightyellow;\\n}\\n\\n.filetree li {\\n  list-style-type: none;\\n  padding-left: 1em;\\n  position: relative;\\n  whitespace: nowrap;\\n}\\n\\n.actions {\\n  position: absolute;\\n  top: 0;\\n  left: 200px;\\n}\\n\\n.repo_info {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  padding: 0.25em 1em;\\n  width: 200px;\\n  overflow: hidden;\\n  border-bottom: 1px solid black;\\n  height: 40px;\\n  font-size: 0.8em;\\n  -ms-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  -webkit-box-sizing: border-box;\\n  box-sizing: border-box;\\n}\\n\\n.console-wrap {\\n  position: absolute;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  padding-left: 200px;\\n  height: 100px;\\n  width: 100%;\\n  margin: 0;\\n  -ms-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  -webkit-box-sizing: border-box;\\n  box-sizing: border-box;\\n}\\n\\n.console-wrap .errors {\\n  border-top: 1px solid black;\\n  color: red;\\n  -ms-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  -webkit-box-sizing: border-box;\\n  box-sizing: border-box;\\n}\\n\\n.status {\\n  top: 0;\\n  right: 0;\\n  position: absolute;\\n}\"",
      "type": "blob"
    },
    "templates/actions": {
      "path": "templates/actions",
      "content": "module.exports = (function(data) {\n  return (function() {\n    var actions, __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"div\");\n    __push(__element);\n    __attribute(__element, \"class\", \"actions\");\n    actions = this.actions;\n    Object.keys(actions).each(function(name) {\n      __element = document.createElement(\"button\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, name.titleize());\n      __push(__element);\n      __pop();\n      __on(\"click\", function() {\n        return actions[name]();\n      });\n      return __pop();\n    });\n    __element = document.createTextNode('');\n    __text(__element, HAMLjr.render(\"issues\", this.issues));\n    __push(__element);\n    __pop();\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
      "type": "blob"
    },
    "templates/editor": {
      "path": "templates/editor",
      "content": "module.exports = (function(data) {\n  return (function() {\n    var __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"div\");\n    __push(__element);\n    __attribute(__element, \"class\", \"main\");\n    __element = document.createTextNode('');\n    __text(__element, HAMLjr.render(\"actions\", {\n      actions: this.actions,\n      issues: this.issues\n    }));\n    __push(__element);\n    __pop();\n    __element = document.createTextNode('');\n    __text(__element, HAMLjr.render(\"filetree\", this.filetree));\n    __push(__element);\n    __pop();\n    __element = document.createTextNode('');\n    __text(__element, HAMLjr.render(\"notifications\", this.notifications));\n    __push(__element);\n    __pop();\n    __element = document.createTextNode('');\n    __text(__element, HAMLjr.render(\"repo_info\", this.repository));\n    __push(__element);\n    __pop();\n    __element = document.createTextNode('');\n    __text(__element, HAMLjr.render(\"github_status\", this.github));\n    __push(__element);\n    __pop();\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
      "type": "blob"
    },
    "templates/filetree": {
      "path": "templates/filetree",
      "content": "module.exports = (function(data) {\n  return (function() {\n    var files, selectedFile, __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"ul\");\n    __push(__element);\n    __attribute(__element, \"class\", \"filetree\");\n    selectedFile = this.selectedFile;\n    files = this.files;\n    __each(files, function(file) {\n      __element = document.createElement(\"li\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, file.displayName);\n      __push(__element);\n      __pop();\n      __on(\"click\", function(e) {\n        if ($(e.target).is('li')) {\n          return selectedFile(file);\n        }\n      });\n      __element = document.createElement(\"div\");\n      __push(__element);\n      __attribute(__element, \"class\", \"delete\");\n      __on(\"click\", function() {\n        if (confirm(\"Delete \" + (file.path()) + \"?\")) {\n          return files.remove(file);\n        }\n      });\n      __element = document.createTextNode('');\n      __text(__element, \"X\\n\");\n      __push(__element);\n      __pop();\n      __pop();\n      return __pop();\n    });\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
      "type": "blob"
    },
    "templates/github_status": {
      "path": "templates/github_status",
      "content": "module.exports = (function(data) {\n  return (function() {\n    var github, __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"div\");\n    __push(__element);\n    __attribute(__element, \"class\", \"status\");\n    github = this;\n    __with(this.lastRequest, function() {\n      __element = document.createElement(\"div\");\n      __push(__element);\n      if (this.getAllResponseHeaders && this.getAllResponseHeaders().match(/X-RateLimit-Limit: 5000/)) {\n        __element = document.createTextNode('');\n        __text(__element, \"Authenticated Scopes:\\n\");\n        __push(__element);\n        __pop();\n        __element = document.createTextNode('');\n        __text(__element, this.getResponseHeader(\"X-OAuth-Scopes\"));\n        __push(__element);\n        __pop();\n        __element = document.createElement(\"br\");\n        __push(__element);\n        __pop();\n        __element = document.createTextNode('');\n        __text(__element, \"Rate Limit Remaining:\\n\");\n        __push(__element);\n        __pop();\n        __element = document.createTextNode('');\n        __text(__element, this.getResponseHeader(\"X-RateLimit-Remaining\"));\n        __push(__element);\n        __pop();\n        __element = document.createTextNode('');\n        __text(__element, \" / 5000\");\n        __push(__element);\n        __pop();\n      } else {\n        __element = document.createElement(\"button\");\n        __push(__element);\n        __element = document.createTextNode('');\n        __text(__element, \"Auth\\n\");\n        __push(__element);\n        __pop();\n        __on(\"click\", function() {\n          return window.location = github.authorizationUrl(\"bc46af967c926ba4ff87\", \"gist,repo,user:email\");\n        });\n        __pop();\n      }\n      return __pop();\n    });\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
      "type": "blob"
    },
    "templates/repo_info": {
      "path": "templates/repo_info",
      "content": "module.exports = (function(data) {\n  return (function() {\n    var __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"div\");\n    __push(__element);\n    __attribute(__element, \"class\", \"repo_info\");\n    __with(this, function() {\n      __element = document.createElement(\"div\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, this.full_name);\n      __push(__element);\n      __pop();\n      __element = document.createTextNode('');\n      __text(__element, \":\\n\");\n      __push(__element);\n      __pop();\n      __element = document.createTextNode('');\n      __text(__element, this.branch);\n      __push(__element);\n      __pop();\n      return __pop();\n    });\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
      "type": "blob"
    },
    "templates/text_editor": {
      "path": "templates/text_editor",
      "content": "module.exports = (function(data) {\n  return (function() {\n    var __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"div\");\n    __push(__element);\n    __attribute(__element, \"class\", \"editor-wrap\");\n    __element = document.createElement(\"div\");\n    __push(__element);\n    __attribute(__element, \"class\", \"editor\");\n    __pop();\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
      "type": "blob"
    },
    "test/another_test": {
      "path": "test/another_test",
      "content": "(function() {\n  describe(\"editor\", function() {\n    return it(\"should run both files\", function() {\n      return assert(true);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "test/test": {
      "path": "test/test",
      "content": "(function() {\n  describe(\"editor\", function() {\n    return it(\"should test things\", function() {\n      return assert(true);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "test/util": {
      "path": "test/util",
      "content": "(function() {\n  var Util;\n\n  Util = require(\"../source/util\");\n\n  describe(\"Util\", function() {\n    return it(\"should allow reading of the source config\", function() {\n      return assert(Util.readSourceConfig(PACKAGE));\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    }
  },
  "entryPoint": "main",
  "dependencies": {
    "issues": {
      "source": {
        "README.md": {
          "path": "README.md",
          "mode": "100644",
          "content": "issues\n======\n\nGithub's got issues\n\nGoal\n----\n\nCurrently just provides a dropdown list for choosing an issue from.\n\nMay later expand to forms to create/show/comment on issues for a project.\n",
          "type": "blob"
        },
        "main.coffee.md": {
          "path": "main.coffee.md",
          "mode": "100644",
          "content": "Our main entry point which exports all of our Issue models and templates.\n\n    module.exports =\n      models:\n        Issue: require(\"./source/issue\")\n        Issues: require(\"./source/issues\")\n      templates:\n        issues: require(\"./templates/issues\")\n",
          "type": "blob"
        },
        "source/issue.coffee.md": {
          "path": "source/issue.coffee.md",
          "mode": "100644",
          "content": "A tempest model that wraps issues from github.\n\n    Issue = (I={}) ->\n      self = Model(I)\n    \n      self.extend\n\nThe option text is what appears in the dropdown menu.\n\n        optionText: ->\n          \"#{I.title}\"\n\n        fullDescription: ->\n          \"\"\"\n            #{self.optionText()}\n            #{I.html_url}\n            #{I.body}\n          \"\"\"\n\nA helper method to get a standard branch name for an issue. Pull requests have\ntheir own branches, but an issue branch is generated based on issue number.\n\n        branchName: ->\n          I.head?.ref or \"issue-#{I.number}\"\n    \n      return self\n\n    module.exports = Issue\n",
          "type": "blob"
        },
        "source/issues.coffee.md": {
          "path": "source/issues.coffee.md",
          "mode": "100644",
          "content": "    Issue = require \"./issue\"\n\nA collection of issues including a `currentIssue` to represent the actively\nselected issue.\n\nWe may want to formalize this collection pattern later, but for now lets just\nsee how it goes.\n\n    Issues = (I={}) ->\n      Object.defaults I,\n        issues: []\n\n      self = Model(I)\n\nOur `issues` method is a list of `Issue` models.\n\n      self.attrModels \"issues\", Issue\n\nWe want to expose the currently selected issue as an observable as well.\n\n      self.attrObservable \"currentIssue\"\n\n      self.extend\n\nThe reset method accepts an array of raw issue data, converts it into an array\nof issue objects, replaces the previous issues with the new ones and clears the \nselected issue.\n\n        reset: (issueData) ->\n          self.currentIssue(undefined)\n          self.issues issueData.map(Issue)\n    \n      return self\n\n    module.exports = Issues\n",
          "type": "blob"
        },
        "templates/issues.haml.md": {
          "path": "templates/issues.haml.md",
          "mode": "100644",
          "content": "A simple select element to allow choosing of issues.\n\n    %select\n      - on \"change\", @currentIssue\n      %option= \"- Default Branch -\"\n      - each @issues, ->\n        %option= @optionText()\n",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  module.exports = {\n    models: {\n      Issue: require(\"./source/issue\"),\n      Issues: require(\"./source/issues\")\n    },\n    templates: {\n      issues: require(\"./templates/issues\")\n    }\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "source/issue": {
          "path": "source/issue",
          "content": "(function() {\n  var Issue;\n\n  Issue = function(I) {\n    var self;\n    if (I == null) {\n      I = {};\n    }\n    self = Model(I);\n    self.extend({\n      optionText: function() {\n        return \"\" + I.title;\n      },\n      fullDescription: function() {\n        return \"\" + (self.optionText()) + \"\\n\" + I.html_url + \"\\n\" + I.body;\n      },\n      branchName: function() {\n        var _ref;\n        return ((_ref = I.head) != null ? _ref.ref : void 0) || (\"issue-\" + I.number);\n      }\n    });\n    return self;\n  };\n\n  module.exports = Issue;\n\n}).call(this);\n",
          "type": "blob"
        },
        "source/issues": {
          "path": "source/issues",
          "content": "(function() {\n  var Issue, Issues;\n\n  Issue = require(\"./issue\");\n\n  Issues = function(I) {\n    var self;\n    if (I == null) {\n      I = {};\n    }\n    Object.defaults(I, {\n      issues: []\n    });\n    self = Model(I);\n    self.attrModels(\"issues\", Issue);\n    self.attrObservable(\"currentIssue\");\n    self.extend({\n      reset: function(issueData) {\n        self.currentIssue(void 0);\n        return self.issues(issueData.map(Issue));\n      }\n    });\n    return self;\n  };\n\n  module.exports = Issues;\n\n}).call(this);\n",
          "type": "blob"
        },
        "templates/issues": {
          "path": "templates/issues",
          "content": "module.exports = (function(data) {\n  return (function() {\n    var __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"select\");\n    __push(__element);\n    __on(\"change\", this.currentIssue);\n    __element = document.createElement(\"option\");\n    __push(__element);\n    __element = document.createTextNode('');\n    __text(__element, \"- Default Branch -\");\n    __push(__element);\n    __pop();\n    __pop();\n    __each(this.issues, function() {\n      __element = document.createElement(\"option\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, this.optionText());\n      __push(__element);\n      __pop();\n      return __pop();\n    });\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
          "type": "blob"
        }
      },
      "entryPoint": "main",
      "dependencies": {},
      "repository": {
        "id": 12632346,
        "name": "issues",
        "full_name": "STRd6/issues",
        "owner": {
          "login": "STRd6",
          "id": 18894,
          "avatar_url": "https://0.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045?d=https%3A%2F%2Fidenticons.github.com%2F39df222bffe39629d904e4883eabc654.png",
          "gravatar_id": "33117162fff8a9cf50544a604f60c045",
          "url": "https://api.github.com/users/STRd6",
          "html_url": "https://github.com/STRd6",
          "followers_url": "https://api.github.com/users/STRd6/followers",
          "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
          "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
          "organizations_url": "https://api.github.com/users/STRd6/orgs",
          "repos_url": "https://api.github.com/users/STRd6/repos",
          "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
          "received_events_url": "https://api.github.com/users/STRd6/received_events",
          "type": "User"
        },
        "private": false,
        "html_url": "https://github.com/STRd6/issues",
        "description": "Github's got issues",
        "fork": false,
        "url": "https://api.github.com/repos/STRd6/issues",
        "forks_url": "https://api.github.com/repos/STRd6/issues/forks",
        "keys_url": "https://api.github.com/repos/STRd6/issues/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/STRd6/issues/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/STRd6/issues/teams",
        "hooks_url": "https://api.github.com/repos/STRd6/issues/hooks",
        "issue_events_url": "https://api.github.com/repos/STRd6/issues/issues/events{/number}",
        "events_url": "https://api.github.com/repos/STRd6/issues/events",
        "assignees_url": "https://api.github.com/repos/STRd6/issues/assignees{/user}",
        "branches_url": "https://api.github.com/repos/STRd6/issues/branches{/branch}",
        "tags_url": "https://api.github.com/repos/STRd6/issues/tags",
        "blobs_url": "https://api.github.com/repos/STRd6/issues/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/STRd6/issues/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/STRd6/issues/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/STRd6/issues/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/STRd6/issues/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/STRd6/issues/languages",
        "stargazers_url": "https://api.github.com/repos/STRd6/issues/stargazers",
        "contributors_url": "https://api.github.com/repos/STRd6/issues/contributors",
        "subscribers_url": "https://api.github.com/repos/STRd6/issues/subscribers",
        "subscription_url": "https://api.github.com/repos/STRd6/issues/subscription",
        "commits_url": "https://api.github.com/repos/STRd6/issues/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/STRd6/issues/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/STRd6/issues/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/STRd6/issues/issues/comments/{number}",
        "contents_url": "https://api.github.com/repos/STRd6/issues/contents/{+path}",
        "compare_url": "https://api.github.com/repos/STRd6/issues/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/STRd6/issues/merges",
        "archive_url": "https://api.github.com/repos/STRd6/issues/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/STRd6/issues/downloads",
        "issues_url": "https://api.github.com/repos/STRd6/issues/issues{/number}",
        "pulls_url": "https://api.github.com/repos/STRd6/issues/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/STRd6/issues/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/STRd6/issues/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/STRd6/issues/labels{/name}",
        "created_at": "2013-09-06T00:35:16Z",
        "updated_at": "2013-09-15T01:55:08Z",
        "pushed_at": "2013-09-15T01:55:08Z",
        "git_url": "git://github.com/STRd6/issues.git",
        "ssh_url": "git@github.com:STRd6/issues.git",
        "clone_url": "https://github.com/STRd6/issues.git",
        "svn_url": "https://github.com/STRd6/issues",
        "homepage": null,
        "size": 1624,
        "watchers_count": 0,
        "language": "JavaScript",
        "has_issues": true,
        "has_downloads": true,
        "has_wiki": true,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "master_branch": "master",
        "default_branch": "master",
        "permissions": {
          "admin": true,
          "push": true,
          "pull": true
        },
        "network_count": 0,
        "branch": "master",
        "defaultBranch": "master",
        "includedModules": [
          "Bindable"
        ]
      },
      "progenitor": {
        "url": "http://strd6.github.io/editor/"
      }
    },
    "test_runner": {
      "source": {
        "README.md": {
          "path": "README.md",
          "mode": "100644",
          "content": "tests\n=====\n\nProvide tests to online editor\n",
          "type": "blob"
        },
        "TODO": {
          "path": "TODO",
          "mode": "100644",
          "content": "Investigate Leak Checking\n",
          "type": "blob"
        },
        "main.coffee.md": {
          "path": "main.coffee.md",
          "mode": "100644",
          "content": "\n    module.exports = \n\nGenerate an html template that runs the given script tag strings as tests.\n      \n      html: (testScripts) -> \"\"\"\n        <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>Mocha Tests</title>\n          <link rel=\"stylesheet\" href=\"http://strd6.github.io/tests/mocha.css\" />\n        </head>\n        <body>\n          <div id=\"mocha\"></div>\n          <script src=\"http://strd6.github.io/tests/assert.js\"><\\/script>\n          <script src=\"http://strd6.github.io/tests/mocha.js\"><\\/script>\n          <script>mocha.setup('bdd')<\\/script>\n          #{testScripts}\n          <script>\n            mocha.checkLeaks();\n            mocha.globals(['jQuery']);\n            mocha.run();\n          <\\/script>\n        </body>\n        </html>\n      \"\"\"\n",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  module.exports = {\n    html: function(testScripts) {\n      return \"<html>\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <title>Mocha Tests</title>\\n  <link rel=\\\"stylesheet\\\" href=\\\"http://strd6.github.io/tests/mocha.css\\\" />\\n</head>\\n<body>\\n  <div id=\\\"mocha\\\"></div>\\n  <script src=\\\"http://strd6.github.io/tests/assert.js\\\"><\\/script>\\n  <script src=\\\"http://strd6.github.io/tests/mocha.js\\\"><\\/script>\\n  <script>mocha.setup('bdd')<\\/script>\\n  \" + testScripts + \"\\n  <script>\\n    mocha.checkLeaks();\\n    mocha.globals(['jQuery']);\\n    mocha.run();\\n  <\\/script>\\n</body>\\n</html>\";\n    }\n  };\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "entryPoint": "main",
      "dependencies": {},
      "repository": {
        "id": 12771540,
        "name": "tests",
        "full_name": "STRd6/tests",
        "owner": {
          "login": "STRd6",
          "id": 18894,
          "avatar_url": "https://1.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045?d=https%3A%2F%2Fidenticons.github.com%2F39df222bffe39629d904e4883eabc654.png",
          "gravatar_id": "33117162fff8a9cf50544a604f60c045",
          "url": "https://api.github.com/users/STRd6",
          "html_url": "https://github.com/STRd6",
          "followers_url": "https://api.github.com/users/STRd6/followers",
          "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
          "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
          "organizations_url": "https://api.github.com/users/STRd6/orgs",
          "repos_url": "https://api.github.com/users/STRd6/repos",
          "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
          "received_events_url": "https://api.github.com/users/STRd6/received_events",
          "type": "User"
        },
        "private": false,
        "html_url": "https://github.com/STRd6/tests",
        "description": "Provide tests to online editor",
        "fork": false,
        "url": "https://api.github.com/repos/STRd6/tests",
        "forks_url": "https://api.github.com/repos/STRd6/tests/forks",
        "keys_url": "https://api.github.com/repos/STRd6/tests/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/STRd6/tests/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/STRd6/tests/teams",
        "hooks_url": "https://api.github.com/repos/STRd6/tests/hooks",
        "issue_events_url": "https://api.github.com/repos/STRd6/tests/issues/events{/number}",
        "events_url": "https://api.github.com/repos/STRd6/tests/events",
        "assignees_url": "https://api.github.com/repos/STRd6/tests/assignees{/user}",
        "branches_url": "https://api.github.com/repos/STRd6/tests/branches{/branch}",
        "tags_url": "https://api.github.com/repos/STRd6/tests/tags",
        "blobs_url": "https://api.github.com/repos/STRd6/tests/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/STRd6/tests/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/STRd6/tests/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/STRd6/tests/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/STRd6/tests/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/STRd6/tests/languages",
        "stargazers_url": "https://api.github.com/repos/STRd6/tests/stargazers",
        "contributors_url": "https://api.github.com/repos/STRd6/tests/contributors",
        "subscribers_url": "https://api.github.com/repos/STRd6/tests/subscribers",
        "subscription_url": "https://api.github.com/repos/STRd6/tests/subscription",
        "commits_url": "https://api.github.com/repos/STRd6/tests/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/STRd6/tests/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/STRd6/tests/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/STRd6/tests/issues/comments/{number}",
        "contents_url": "https://api.github.com/repos/STRd6/tests/contents/{+path}",
        "compare_url": "https://api.github.com/repos/STRd6/tests/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/STRd6/tests/merges",
        "archive_url": "https://api.github.com/repos/STRd6/tests/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/STRd6/tests/downloads",
        "issues_url": "https://api.github.com/repos/STRd6/tests/issues{/number}",
        "pulls_url": "https://api.github.com/repos/STRd6/tests/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/STRd6/tests/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/STRd6/tests/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/STRd6/tests/labels{/name}",
        "created_at": "2013-09-12T00:46:52Z",
        "updated_at": "2013-09-16T06:03:31Z",
        "pushed_at": "2013-09-16T06:03:31Z",
        "git_url": "git://github.com/STRd6/tests.git",
        "ssh_url": "git@github.com:STRd6/tests.git",
        "clone_url": "https://github.com/STRd6/tests.git",
        "svn_url": "https://github.com/STRd6/tests",
        "homepage": null,
        "size": 712,
        "watchers_count": 0,
        "language": null,
        "has_issues": true,
        "has_downloads": true,
        "has_wiki": true,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 1,
        "forks": 0,
        "open_issues": 1,
        "watchers": 0,
        "master_branch": "master",
        "default_branch": "master",
        "permissions": {
          "admin": true,
          "push": true,
          "pull": true
        },
        "network_count": 0,
        "branch": "master",
        "defaultBranch": "master",
        "includedModules": [
          "Bindable"
        ]
      },
      "progenitor": {
        "url": "http://strd6.github.io/editor/"
      }
    },
    "sandbox": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "mode": "100644",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "mode": "100644",
          "content": "sandbox\n=======\n\nRun code in a popup window filled with sand.\n",
          "type": "blob"
        },
        "main.coffee.md": {
          "path": "main.coffee.md",
          "mode": "100644",
          "content": "Sandbox\n=======\n\nSandbox creates a popup window in which you can run code.\n\nYou can pass in a width and a height to set the size of the window.\n\n    module.exports = ({name, width, height, methods}={}) ->\n      name ?= \"sandbox\" + new Date\n      width ?= 800\n      height ?= 600\n      methods ?= {}\n    \n      sandbox = window.open(\n        \"\"\n        name\n        \"width=#{width},height=#{height}\"\n      )\n    \nPass in functions to attach to the running window. Useful for things like\n`onerror` or other utilities if you would like the running code to be able to\ncommunicate back to the parent.\n\n      Object.extend sandbox, methods\n\nThe newly created window is returned.\n\n      return sandbox\n",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  module.exports = function(_arg) {\n    var height, methods, name, sandbox, width, _ref;\n    _ref = _arg != null ? _arg : {}, name = _ref.name, width = _ref.width, height = _ref.height, methods = _ref.methods;\n    if (name == null) {\n      name = \"sandbox\" + new Date;\n    }\n    if (width == null) {\n      width = 800;\n    }\n    if (height == null) {\n      height = 600;\n    }\n    if (methods == null) {\n      methods = {};\n    }\n    sandbox = window.open(\"\", name, \"width=\" + width + \",height=\" + height);\n    Object.extend(sandbox, methods);\n    return sandbox;\n  };\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "entryPoint": "main",
      "dependencies": {},
      "repository": {
        "id": 12746310,
        "name": "sandbox",
        "full_name": "STRd6/sandbox",
        "owner": {
          "login": "STRd6",
          "id": 18894,
          "avatar_url": "https://2.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045?d=https%3A%2F%2Fidenticons.github.com%2F39df222bffe39629d904e4883eabc654.png",
          "gravatar_id": "33117162fff8a9cf50544a604f60c045",
          "url": "https://api.github.com/users/STRd6",
          "html_url": "https://github.com/STRd6",
          "followers_url": "https://api.github.com/users/STRd6/followers",
          "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
          "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
          "organizations_url": "https://api.github.com/users/STRd6/orgs",
          "repos_url": "https://api.github.com/users/STRd6/repos",
          "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
          "received_events_url": "https://api.github.com/users/STRd6/received_events",
          "type": "User"
        },
        "private": false,
        "html_url": "https://github.com/STRd6/sandbox",
        "description": "Run code in a popup window filled with sand.",
        "fork": false,
        "url": "https://api.github.com/repos/STRd6/sandbox",
        "forks_url": "https://api.github.com/repos/STRd6/sandbox/forks",
        "keys_url": "https://api.github.com/repos/STRd6/sandbox/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/STRd6/sandbox/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/STRd6/sandbox/teams",
        "hooks_url": "https://api.github.com/repos/STRd6/sandbox/hooks",
        "issue_events_url": "https://api.github.com/repos/STRd6/sandbox/issues/events{/number}",
        "events_url": "https://api.github.com/repos/STRd6/sandbox/events",
        "assignees_url": "https://api.github.com/repos/STRd6/sandbox/assignees{/user}",
        "branches_url": "https://api.github.com/repos/STRd6/sandbox/branches{/branch}",
        "tags_url": "https://api.github.com/repos/STRd6/sandbox/tags",
        "blobs_url": "https://api.github.com/repos/STRd6/sandbox/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/STRd6/sandbox/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/STRd6/sandbox/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/STRd6/sandbox/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/STRd6/sandbox/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/STRd6/sandbox/languages",
        "stargazers_url": "https://api.github.com/repos/STRd6/sandbox/stargazers",
        "contributors_url": "https://api.github.com/repos/STRd6/sandbox/contributors",
        "subscribers_url": "https://api.github.com/repos/STRd6/sandbox/subscribers",
        "subscription_url": "https://api.github.com/repos/STRd6/sandbox/subscription",
        "commits_url": "https://api.github.com/repos/STRd6/sandbox/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/STRd6/sandbox/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/STRd6/sandbox/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/STRd6/sandbox/issues/comments/{number}",
        "contents_url": "https://api.github.com/repos/STRd6/sandbox/contents/{+path}",
        "compare_url": "https://api.github.com/repos/STRd6/sandbox/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/STRd6/sandbox/merges",
        "archive_url": "https://api.github.com/repos/STRd6/sandbox/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/STRd6/sandbox/downloads",
        "issues_url": "https://api.github.com/repos/STRd6/sandbox/issues{/number}",
        "pulls_url": "https://api.github.com/repos/STRd6/sandbox/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/STRd6/sandbox/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/STRd6/sandbox/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/STRd6/sandbox/labels{/name}",
        "created_at": "2013-09-11T03:03:50Z",
        "updated_at": "2013-09-16T06:11:09Z",
        "pushed_at": "2013-09-16T06:11:08Z",
        "git_url": "git://github.com/STRd6/sandbox.git",
        "ssh_url": "git@github.com:STRd6/sandbox.git",
        "clone_url": "https://github.com/STRd6/sandbox.git",
        "svn_url": "https://github.com/STRd6/sandbox",
        "homepage": null,
        "size": 476,
        "watchers_count": 0,
        "language": "CoffeeScript",
        "has_issues": true,
        "has_downloads": true,
        "has_wiki": true,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "master_branch": "master",
        "default_branch": "master",
        "permissions": {
          "admin": true,
          "push": true,
          "pull": true
        },
        "network_count": 0,
        "branch": "master",
        "defaultBranch": "master",
        "includedModules": [
          "Bindable"
        ]
      },
      "progenitor": {
        "url": "http://strd6.github.io/editor/"
      }
    },
    "notifications": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "mode": "100644",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "mode": "100644",
          "content": "notifications\n=============\n\nNotifications widget\n",
          "type": "blob"
        },
        "main.coffee.md": {
          "path": "main.coffee.md",
          "mode": "100644",
          "content": "A component to handle displaying two streams of messages: notices and errors.\n\n    Notifications = ->\n\nObservable arrays containing our notices and error streams.\n\n      notices = Observable([])\n      errors = Observable([])\n\nAn error handler capable of displaying many common errors. Still needs work.\n\n      classicError: (request, error, message) ->\n        notices []\n        \n        if request.responseJSON\n          message = JSON.stringify(request.responseJSON, null, 2)\n        else\n          message ?= request\n      \n        errors [message]\n\nClear all previous errors and notices and display the message as a notice.\n\n      notify: (message) ->\n        notices [message]\n        errors []\n\nAppend a message to the notices.\n\n      push: (message) ->\n        notices.push message\n        \n      errors: errors\n      notices: notices\n        \n      template: require('./template')\n\n    module.exports = Notifications\n",
          "type": "blob"
        },
        "template.haml.md": {
          "path": "template.haml.md",
          "mode": "100644",
          "content": "A simple console to display notification streams.\n\n    .console-wrap\n      %pre.errors\n        - each @errors, (error) ->\n          = error\n      %pre.notices\n        - each @notices, (notice) ->\n          = notice\n",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  var Notifications;\n\n  Notifications = function() {\n    var errors, notices;\n    notices = Observable([]);\n    errors = Observable([]);\n    return {\n      classicError: function(request, error, message) {\n        notices([]);\n        if (request.responseJSON) {\n          message = JSON.stringify(request.responseJSON, null, 2);\n        } else {\n          if (message == null) {\n            message = request;\n          }\n        }\n        return errors([message]);\n      },\n      notify: function(message) {\n        notices([message]);\n        return errors([]);\n      },\n      push: function(message) {\n        return notices.push(message);\n      },\n      errors: errors,\n      notices: notices,\n      template: require('./template')\n    };\n  };\n\n  module.exports = Notifications;\n\n}).call(this);\n",
          "type": "blob"
        },
        "template": {
          "path": "template",
          "content": "module.exports = (function(data) {\n  return (function() {\n    var __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n    _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n    __push(document.createDocumentFragment());\n    __element = document.createElement(\"div\");\n    __push(__element);\n    __attribute(__element, \"class\", \"console-wrap\");\n    __element = document.createElement(\"pre\");\n    __push(__element);\n    __attribute(__element, \"class\", \"errors\");\n    __each(this.errors, function(error) {\n      __element = document.createTextNode('');\n      __text(__element, error);\n      __push(__element);\n      return __pop();\n    });\n    __pop();\n    __element = document.createElement(\"pre\");\n    __push(__element);\n    __attribute(__element, \"class\", \"notices\");\n    __each(this.notices, function(notice) {\n      __element = document.createTextNode('');\n      __text(__element, notice);\n      __push(__element);\n      return __pop();\n    });\n    __pop();\n    __pop();\n    return __pop();\n  }).call(data);\n});\n;",
          "type": "blob"
        }
      },
      "entryPoint": "main",
      "dependencies": {},
      "repository": {
        "id": 12908956,
        "name": "notifications",
        "full_name": "STRd6/notifications",
        "owner": {
          "login": "STRd6",
          "id": 18894,
          "avatar_url": "https://2.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045?d=https%3A%2F%2Fidenticons.github.com%2F39df222bffe39629d904e4883eabc654.png",
          "gravatar_id": "33117162fff8a9cf50544a604f60c045",
          "url": "https://api.github.com/users/STRd6",
          "html_url": "https://github.com/STRd6",
          "followers_url": "https://api.github.com/users/STRd6/followers",
          "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
          "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
          "organizations_url": "https://api.github.com/users/STRd6/orgs",
          "repos_url": "https://api.github.com/users/STRd6/repos",
          "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
          "received_events_url": "https://api.github.com/users/STRd6/received_events",
          "type": "User"
        },
        "private": false,
        "html_url": "https://github.com/STRd6/notifications",
        "description": "Notifications widget",
        "fork": false,
        "url": "https://api.github.com/repos/STRd6/notifications",
        "forks_url": "https://api.github.com/repos/STRd6/notifications/forks",
        "keys_url": "https://api.github.com/repos/STRd6/notifications/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/STRd6/notifications/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/STRd6/notifications/teams",
        "hooks_url": "https://api.github.com/repos/STRd6/notifications/hooks",
        "issue_events_url": "https://api.github.com/repos/STRd6/notifications/issues/events{/number}",
        "events_url": "https://api.github.com/repos/STRd6/notifications/events",
        "assignees_url": "https://api.github.com/repos/STRd6/notifications/assignees{/user}",
        "branches_url": "https://api.github.com/repos/STRd6/notifications/branches{/branch}",
        "tags_url": "https://api.github.com/repos/STRd6/notifications/tags",
        "blobs_url": "https://api.github.com/repos/STRd6/notifications/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/STRd6/notifications/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/STRd6/notifications/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/STRd6/notifications/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/STRd6/notifications/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/STRd6/notifications/languages",
        "stargazers_url": "https://api.github.com/repos/STRd6/notifications/stargazers",
        "contributors_url": "https://api.github.com/repos/STRd6/notifications/contributors",
        "subscribers_url": "https://api.github.com/repos/STRd6/notifications/subscribers",
        "subscription_url": "https://api.github.com/repos/STRd6/notifications/subscription",
        "commits_url": "https://api.github.com/repos/STRd6/notifications/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/STRd6/notifications/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/STRd6/notifications/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/STRd6/notifications/issues/comments/{number}",
        "contents_url": "https://api.github.com/repos/STRd6/notifications/contents/{+path}",
        "compare_url": "https://api.github.com/repos/STRd6/notifications/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/STRd6/notifications/merges",
        "archive_url": "https://api.github.com/repos/STRd6/notifications/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/STRd6/notifications/downloads",
        "issues_url": "https://api.github.com/repos/STRd6/notifications/issues{/number}",
        "pulls_url": "https://api.github.com/repos/STRd6/notifications/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/STRd6/notifications/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/STRd6/notifications/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/STRd6/notifications/labels{/name}",
        "created_at": "2013-09-17T23:04:30Z",
        "updated_at": "2013-09-17T23:31:31Z",
        "pushed_at": "2013-09-17T23:31:31Z",
        "git_url": "git://github.com/STRd6/notifications.git",
        "ssh_url": "git@github.com:STRd6/notifications.git",
        "clone_url": "https://github.com/STRd6/notifications.git",
        "svn_url": "https://github.com/STRd6/notifications",
        "homepage": null,
        "size": 240,
        "watchers_count": 0,
        "language": null,
        "has_issues": true,
        "has_downloads": true,
        "has_wiki": true,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "master_branch": "master",
        "default_branch": "master",
        "permissions": {
          "admin": true,
          "push": true,
          "pull": true
        },
        "network_count": 0,
        "branch": "master",
        "defaultBranch": "master",
        "includedModules": [
          "Bindable"
        ]
      },
      "progenitor": {
        "url": "http://strd6.github.io/editor/"
      }
    },
    "github": {
      "version": "0.2.0",
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "mode": "100644",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "mode": "100644",
          "content": "github\n======\n\nGithub API for online IDEs\n",
          "type": "blob"
        },
        "api_generator.coffee.md": {
          "path": "api_generator.coffee.md",
          "mode": "100644",
          "content": "\nGenerate all those fun API verbs: `get`, `put`, `post`, `patch`, `delete`\n\nOur helpers need a root to base off of. The root is a function that returns a\nstring. The requester does the actual api calls, these just set it up easily.\n\n    ApiGenerator = (root, requester) ->\n\nConfigure the options for a request by stringifying any data to be added to the\nrequest body, and setting the appropriate type. `get` requests don't call this\nas the default type is `get` and they put their params in the querystring.\n\n      requestOptions = (type, data) ->\n        type: type\n        data: JSON.stringify(data)\n\nIf our request is absolute we use that url, otherwise we get the base url from\nour root and append the path. This allows us to follow HATEOS resource urls more\neasily.\n\n      api = (path, options) ->\n        if path.match /^http/\n          url = path\n        else\n          url = \"#{root()}/#{path}\"\n              \n        requester url, options\n\nExpose the basic api method in our returned object.\n\n      api: api\n\n      get: (path, data) ->\n        api path, data: data\n\n      put: (path, data) ->\n        api(path, requestOptions(\"PUT\", data))\n\n      post: (path, data) ->\n        api(path, requestOptions(\"POST\", data))\n\n      patch: (path, data) ->\n        api path, requestOptions(\"PATCH\", data)\n\n`delete` is a keyword in JS, so I guess we'll go with all caps. We maybe should\ngo with all caps for everything, but it seems so loud.\n\n      DELETE: (path, data) ->\n        api path, requestOptions(\"DELETE\", data)\n\n    module.exports = ApiGenerator\n",
          "type": "blob"
        },
        "main.coffee.md": {
          "path": "main.coffee.md",
          "mode": "100644",
          "content": "    Repository = require \"./repository\"\n\nGithub handles our connections to the Github API. May be optionally passed a\npromise that when fulfilled will set the authorization token.\n\n    Github = (tokenPromise) ->\n\nOur OAuth token for making API requests. We can still make anonymous requests\nwithout it.\n\n      token = null\n      \n      tokenPromise?.then (tokenValue) ->\n        token = tokenValue\n\nHold an observable for the last request so we can track things like oauth scopes\nand rate limit.\n\n      lastRequest = Observable()\n\nMake a call to the github API. The path can be either a relative path such as\n`users/STRd6` or an absolute path like `https://api.github.com/users/octocat` or\n`user.url`.\n\nWe attach our `accessToken` if present.\n\n`api` returns a promise for easy chaining.\n\n      api = (path, options={}) ->\n        if path.match /^http/\n          url = path\n        else\n          url = \"https://api.github.com/#{path}\"\n        \n        options.headers ||= {}\n        \n        if token\n          options.headers[\"Authorization\"] = \"token #{token}\"\n    \n        options = Object.extend\n          url: url\n          type: \"GET\"\n          dataType: 'json'\n        , options\n\nPerform the ajax call and observe requests on success or failure\n\n        $.ajax(options).done (data, status, request) ->\n          lastRequest(request)\n        .fail lastRequest\n\nPublicly expose `api` method.\n\n      api: api\n\nAlso expose `lastRequest`.\n\n      lastRequest: lastRequest\n\nGetter/Setter for auth token.\n\n      token: (newValue) ->\n        if arguments.length > 0\n          token = newValue\n        else\n          token\n\nExpose the `Repository` constructor so that others can create repositories from\nraw data.\n\n      Repository: (data={}) -> \n        # Use our api for the repository\n        Object.defaults data,\n          requester: api\n\n        Repository(data)\n\nGet a repository, returns a promise that will have a repository one day.\n\n      repository: (fullName) ->\n        # TODO: Consider returning a repository proxy immediately\n        #   may need to be weighed carefully with the tradeoffs of observables.\n        # TODO: Consider creating from a full url in addition to a full name.\n\n        api(\"repos/#{fullName}\")\n        .then (data) ->\n          Object.defaults data,\n            requester: api\n\n          Repository(data)\n\nExpose `authorizationUrl` to instances as well.\n\n      authorizationUrl: Github.authorizationUrl\n\nA URL that will authorize a user with the specified scope for the given app.\n\n    Github.authorizationUrl = (clientId, scope=\"user:email\") ->\n      \"https://github.com/login/oauth/authorize?client_id=#{clientId}&scope=#{scope}\"\n\n    module.exports = Github\n",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "mode": "100644",
          "content": "version: \"0.2.0\"\nwidth: 960\nheight: 800\nremoteDependencies: [\n  \"//code.jquery.com/jquery-1.10.1.min.js\"\n  \"http://strd6.github.io/tempest/javascripts/envweb.js\"\n  \"http://strd6.github.io/require/master.js\"\n]\ndependencies:\n  emojer: \"STRd6/emojer:master\"\n",
          "type": "blob"
        },
        "repository.coffee.md": {
          "path": "repository.coffee.md",
          "mode": "100644",
          "content": "Repsoitory\n==========\n\n`Repository` wraps the concept of a Github repository. It includes additional\ndata for the local working copy such as the current branch.\n\nAll of the methods return promises to allow for easy chaining and error\nreporting.\n\n    ApiGenerator = require('./api_generator')\n\nAn emoji generator to make commits pop!\n\n    emojer = require \"emojer\"\n\n    emojis = ->\n      \"#{emojer()}#{emojer()}\"\n\nConstructor\n-----------\n\nCurrently the only parameter needed to initialize a repository instance is a\n`url`. This url is used as a base for the api calls.\n\n    Repository = (I={}) ->\n      Object.defaults I,\n        branch: \"master\"\n        defaultBranch: \"master\"\n\n      # Requester only matters runtime, not real data\n      # TODO: This is kind of a hack\n      requester = I.requester\n      delete I.requester\n\n      # TODO: Think about converting underscored properties to camel case in an\n      # automatic and consistent way.\n\n      self = Model(I).observeAll()\n\nGet api helper methods from the api generator. With them we can do things like\n`get \"branches\"` to list branches of this repo.\n\n      {get, put, post, patch} = ApiGenerator self.url, requester\n\n      self.extend\n        infoDisplay: ->\n          \"#{I.fullName} (#{I.branch})\"\n\n        pullRequests: ->\n          get \"pulls\"\n\n        createPullRequest: ({title}) ->\n          head = title.dasherize()\n\n          self.switchToBranch(head)\n          .then(self.commitEmpty)\n          .then ->\n            post \"pulls\",\n              base: I.defaultBranch\n              head: head\n              title: title\n\n        latestCommit: (branch=self.branch()) ->\n          get(\"git/refs/heads/#{branch}#{cacheBuster()}\")\n          .then (data) ->\n            get data.object.url\n\n        latestContent: (branch=self.branch()) ->\n          self.latestCommit(branch)\n          .then (data) ->\n            get \"#{data.tree.url}?recursive=1\"\n          .then (data) ->\n            files = data.tree.select (file) ->\n              file.type is \"blob\"\n\n            # Gather the data for each file\n            $.when.apply(null, files.map (datum) ->\n              get(datum.url)\n              .then (data) ->\n                Object.extend(datum, data)\n            )\n          .then (results...) ->\n            results\n\n        commitTree: ({branch, message, baseTree, tree, empty}) ->\n          branch ?= self.branch()\n          message ?= \"#{emojis()} Updated in browser at strd6.github.io/editor\"\n\n          # TODO: Is there a cleaner way to pass this through promises?\n          latestCommitSha = null\n\n          self.latestCommit(branch)\n          .then (data) ->\n            latestCommitSha = data.sha\n\n            if baseTree is true\n              baseTree = data.tree.sha\n\n            if empty is true\n              Deferred().resolve(data.tree)\n            else\n              post \"git/trees\",\n                base_tree: baseTree\n                tree: tree\n          .then (data) ->\n            # Create another commit\n            post \"git/commits\",\n              parents: [latestCommitSha]\n              message: message\n              tree: data.sha\n          .then (data) ->\n            # Update the branch head\n            patch \"git/refs/heads/#{branch}\",\n              sha: data.sha\n\n        # TODO: this is currently a hack because we can't create a pull request\n        # if there are no different commits\n        commitEmpty: ->\n          self.commitTree\n            empty: true\n            message: \"This commit intentionally left blank\"\n\nCreates ref (if it doesn't already exist) using our current branch as a base.\n\n        createRef: (ref) ->\n          get(\"git/refs/heads/#{self.branch()}\")\n          .then (data) ->\n            post \"git/refs\",\n              ref: ref\n              sha: data.object.sha\n\n        switchToBranch: (branch) ->\n          ref = \"refs/heads/#{branch}\"\n\n          setBranch = (data) ->\n            self.branch(branch)\n\n            return data\n\n          get(\"git/#{ref}\")\n          .then setBranch # Success\n          , (request) -> # Failure\n            branchNotFound = (request.status is 404)\n\n            if branchNotFound\n              self.createRef(ref)\n              .then(setBranch)\n            else\n              Deferred().reject(arguments...)\n\n        mergeInto: (branch=self.defaultBranch()) ->\n          post \"merges\",\n            base: branch\n            head: self.branch()\n\n        pullFromBranch: (branch=self.defaultBranch()) ->\n          post \"merges\",\n            base: self.branch()\n            head: branch\n\nThe default branch that we publish our packaged content to.\n\n        publishBranch: ->\n          \"gh-pages\"\n\nInitialize the publish branch, usually `gh-pages`. We create an empty\ntree and set it as a root commit (one with no parents). Then we create\nthe branch referencing that commit.\n\n        initPublishBranch: (branch=self.publishBranch()) ->\n          # Post an empty tree to use for the base commit\n          # TODO: Learn how to post an actually empty tree\n          post \"git/trees\",\n            tree: [{\n              mode: \"1006444\"\n              path: \"tempest.txt\"\n              content: \"created by strd6.github.io/editor\"\n            }]\n          .then (data) ->\n            post \"git/commits\",\n              message: \"Initial commit #{emojis()}\"\n              tree: data.sha\n          .then (data) ->\n            # Create the branch from the base commit\n            post \"git/refs\",\n              ref: \"refs/heads/#{branch}\"\n              sha: data.sha\n\nEnsure our publish branch exists. If it is found it returns a promise that\nsucceeds right away, otherwise it attempts to create it. Either way it\nreturns a promise that will be fullfilled if the publish branch is legit.\n\n        ensurePublishBranch: (publishBranch=self.publishBranch()) ->\n          get(\"branches/#{publishBranch}\")\n          .then null, (request) ->\n            if request.status is 404\n              self.initPublishBranch()\n\nPublish our package for distribution.\n\nWe currently publish a `<branch>.json`, `<branch>.js`, and `<branch>.html`.\n\nThe json is the self contained package for use in any other application. The js is\nan alternative for including as script tag on a page. And the html is a standalone\ndemo page.\n\nIf we are on the defaut branch we publish an additional `index.html` as\na demo page.\n\n        publish: (data, ref=self.branch()) ->\n          message = \"#{emojis()} Built #{ref} in browser in strd6.github.io/editor\"\n\n          name = ref\n\n          # Assuming git repo with gh-pages branch\n          publishBranch = self.publishBranch()\n\n          tree = Object.keys(data).map (extension) ->\n            path: \"#{name}.#{extension}\"\n            content: data[extension]\n\n          if ref is self.defaultBranch()\n            tree.push\n              path: \"index.html\"\n              content: data.html\n\n          self.ensurePublishBranch(publishBranch).then ->\n            self.commitTree\n              baseTree: true\n              tree: tree\n              branch: publishBranch\n\nExpose our API methods.\n\n      Object.extend self,\n        get: get\n        put: put\n        post: post\n        patch: patch\n\n      return self\n\n    module.exports = Repository\n\nHelpers\n-------\n\n    cacheBuster = ->\n      \"?#{+ new Date}\"",
          "type": "blob"
        },
        "test/emojer.coffee": {
          "path": "test/emojer.coffee",
          "mode": "100644",
          "content": "emojer = require \"emojer\"\n\ndescribe \"emojer\", ->\n  it \"should generate emoji\", ->\n    assert emojer()\n",
          "type": "blob"
        },
        "test/github.coffee.md": {
          "path": "test/github.coffee.md",
          "mode": "100644",
          "content": "Testing our Github API wrapper. Currently super hacky, but time heals all.\n\n    Github = require \"../main\"\n    \n    describe \"Github\", ->\n      it \"Should be able to construct repositories\", ->\n        assert Github().repository\n        \n        assert Github().Repository\n\n      it \"should have authorizationUrl as an instance method\", ->\n        assert Github().authorizationUrl\n\n      describe \"Repository\", ->\n\nHacky way to test requests. We just see if it returns a URL that looks ok.\n\n        expected = null\n        expectUrlToMatch = (regex) ->\n          expected = regex\n\n        testRequester = (url, data) ->\n          match = url.match(expected)\n          assert.equal !!match, true, \"\"\"\n            #{url} did not match #{expected}, #{match}\n          \"\"\"\n    \n          then: ->\n    \n        repository = Github().Repository\n          url: \"STRd6/testin\"\n          requester: testRequester\n    \n        it \"should cache bust the latest commit\", ->\n          expectUrlToMatch /.*\\?\\d+/\n\n          repository.latestCommit()\n\n        it \"should create a merge when asked\", ->\n          expectUrlToMatch /STRd6\\/testin\\/merges/\n\n          repository.mergeInto()\n",
          "type": "blob"
        }
      },
      "distribution": {
        "api_generator": {
          "path": "api_generator",
          "content": "(function() {\n  var ApiGenerator;\n\n  ApiGenerator = function(root, requester) {\n    var api, requestOptions;\n    requestOptions = function(type, data) {\n      return {\n        type: type,\n        data: JSON.stringify(data)\n      };\n    };\n    api = function(path, options) {\n      var url;\n      if (path.match(/^http/)) {\n        url = path;\n      } else {\n        url = \"\" + (root()) + \"/\" + path;\n      }\n      return requester(url, options);\n    };\n    return {\n      api: api,\n      get: function(path, data) {\n        return api(path, {\n          data: data\n        });\n      },\n      put: function(path, data) {\n        return api(path, requestOptions(\"PUT\", data));\n      },\n      post: function(path, data) {\n        return api(path, requestOptions(\"POST\", data));\n      },\n      patch: function(path, data) {\n        return api(path, requestOptions(\"PATCH\", data));\n      },\n      DELETE: function(path, data) {\n        return api(path, requestOptions(\"DELETE\", data));\n      }\n    };\n  };\n\n  module.exports = ApiGenerator;\n\n}).call(this);\n",
          "type": "blob"
        },
        "main": {
          "path": "main",
          "content": "(function() {\n  var Github, Repository;\n\n  Repository = require(\"./repository\");\n\n  Github = function(tokenPromise) {\n    var api, lastRequest, token;\n    token = null;\n    if (tokenPromise != null) {\n      tokenPromise.then(function(tokenValue) {\n        return token = tokenValue;\n      });\n    }\n    lastRequest = Observable();\n    api = function(path, options) {\n      var url;\n      if (options == null) {\n        options = {};\n      }\n      if (path.match(/^http/)) {\n        url = path;\n      } else {\n        url = \"https://api.github.com/\" + path;\n      }\n      options.headers || (options.headers = {});\n      if (token) {\n        options.headers[\"Authorization\"] = \"token \" + token;\n      }\n      options = Object.extend({\n        url: url,\n        type: \"GET\",\n        dataType: 'json'\n      }, options);\n      return $.ajax(options).done(function(data, status, request) {\n        return lastRequest(request);\n      }).fail(lastRequest);\n    };\n    return {\n      api: api,\n      lastRequest: lastRequest,\n      token: function(newValue) {\n        if (arguments.length > 0) {\n          return token = newValue;\n        } else {\n          return token;\n        }\n      },\n      Repository: function(data) {\n        if (data == null) {\n          data = {};\n        }\n        Object.defaults(data, {\n          requester: api\n        });\n        return Repository(data);\n      },\n      repository: function(fullName) {\n        return api(\"repos/\" + fullName).then(function(data) {\n          Object.defaults(data, {\n            requester: api\n          });\n          return Repository(data);\n        });\n      },\n      authorizationUrl: Github.authorizationUrl\n    };\n  };\n\n  Github.authorizationUrl = function(clientId, scope) {\n    if (scope == null) {\n      scope = \"user:email\";\n    }\n    return \"https://github.com/login/oauth/authorize?client_id=\" + clientId + \"&scope=\" + scope;\n  };\n\n  module.exports = Github;\n\n}).call(this);\n",
          "type": "blob"
        },
        "repository": {
          "path": "repository",
          "content": "(function() {\n  var ApiGenerator, Repository, cacheBuster, emojer, emojis,\n    __slice = [].slice;\n\n  ApiGenerator = require('./api_generator');\n\n  emojer = require(\"emojer\");\n\n  emojis = function() {\n    return \"\" + (emojer()) + (emojer());\n  };\n\n  Repository = function(I) {\n    var get, patch, post, put, requester, self, _ref;\n    if (I == null) {\n      I = {};\n    }\n    Object.defaults(I, {\n      branch: \"master\",\n      defaultBranch: \"master\"\n    });\n    requester = I.requester;\n    delete I.requester;\n    self = Model(I).observeAll();\n    _ref = ApiGenerator(self.url, requester), get = _ref.get, put = _ref.put, post = _ref.post, patch = _ref.patch;\n    self.extend({\n      infoDisplay: function() {\n        return \"\" + I.fullName + \" (\" + I.branch + \")\";\n      },\n      pullRequests: function() {\n        return get(\"pulls\");\n      },\n      createPullRequest: function(_arg) {\n        var head, title;\n        title = _arg.title;\n        head = title.dasherize();\n        return self.switchToBranch(head).then(self.commitEmpty).then(function() {\n          return post(\"pulls\", {\n            base: I.defaultBranch,\n            head: head,\n            title: title\n          });\n        });\n      },\n      latestCommit: function(branch) {\n        if (branch == null) {\n          branch = self.branch();\n        }\n        return get(\"git/refs/heads/\" + branch + (cacheBuster())).then(function(data) {\n          return get(data.object.url);\n        });\n      },\n      latestContent: function(branch) {\n        if (branch == null) {\n          branch = self.branch();\n        }\n        return self.latestCommit(branch).then(function(data) {\n          return get(\"\" + data.tree.url + \"?recursive=1\");\n        }).then(function(data) {\n          var files;\n          files = data.tree.select(function(file) {\n            return file.type === \"blob\";\n          });\n          return $.when.apply(null, files.map(function(datum) {\n            return get(datum.url).then(function(data) {\n              return Object.extend(datum, data);\n            });\n          }));\n        }).then(function() {\n          var results;\n          results = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return results;\n        });\n      },\n      commitTree: function(_arg) {\n        var baseTree, branch, empty, latestCommitSha, message, tree;\n        branch = _arg.branch, message = _arg.message, baseTree = _arg.baseTree, tree = _arg.tree, empty = _arg.empty;\n        if (branch == null) {\n          branch = self.branch();\n        }\n        if (message == null) {\n          message = \"\" + (emojis()) + \" Updated in browser at strd6.github.io/editor\";\n        }\n        latestCommitSha = null;\n        return self.latestCommit(branch).then(function(data) {\n          latestCommitSha = data.sha;\n          if (baseTree === true) {\n            baseTree = data.tree.sha;\n          }\n          if (empty === true) {\n            return Deferred().resolve(data.tree);\n          } else {\n            return post(\"git/trees\", {\n              base_tree: baseTree,\n              tree: tree\n            });\n          }\n        }).then(function(data) {\n          return post(\"git/commits\", {\n            parents: [latestCommitSha],\n            message: message,\n            tree: data.sha\n          });\n        }).then(function(data) {\n          return patch(\"git/refs/heads/\" + branch, {\n            sha: data.sha\n          });\n        });\n      },\n      commitEmpty: function() {\n        return self.commitTree({\n          empty: true,\n          message: \"This commit intentionally left blank\"\n        });\n      },\n      createRef: function(ref) {\n        return get(\"git/refs/heads/\" + (self.branch())).then(function(data) {\n          return post(\"git/refs\", {\n            ref: ref,\n            sha: data.object.sha\n          });\n        });\n      },\n      switchToBranch: function(branch) {\n        var ref, setBranch;\n        ref = \"refs/heads/\" + branch;\n        setBranch = function(data) {\n          self.branch(branch);\n          return data;\n        };\n        return get(\"git/\" + ref).then(setBranch, function(request) {\n          var branchNotFound, _ref1;\n          branchNotFound = request.status === 404;\n          if (branchNotFound) {\n            return self.createRef(ref).then(setBranch);\n          } else {\n            return (_ref1 = Deferred()).reject.apply(_ref1, arguments);\n          }\n        });\n      },\n      mergeInto: function(branch) {\n        if (branch == null) {\n          branch = self.defaultBranch();\n        }\n        return post(\"merges\", {\n          base: branch,\n          head: self.branch()\n        });\n      },\n      pullFromBranch: function(branch) {\n        if (branch == null) {\n          branch = self.defaultBranch();\n        }\n        return post(\"merges\", {\n          base: self.branch(),\n          head: branch\n        });\n      },\n      publishBranch: function() {\n        return \"gh-pages\";\n      },\n      initPublishBranch: function(branch) {\n        if (branch == null) {\n          branch = self.publishBranch();\n        }\n        return post(\"git/trees\", {\n          tree: [\n            {\n              mode: \"1006444\",\n              path: \"tempest.txt\",\n              content: \"created by strd6.github.io/editor\"\n            }\n          ]\n        }).then(function(data) {\n          return post(\"git/commits\", {\n            message: \"Initial commit \" + (emojis()),\n            tree: data.sha\n          });\n        }).then(function(data) {\n          return post(\"git/refs\", {\n            ref: \"refs/heads/\" + branch,\n            sha: data.sha\n          });\n        });\n      },\n      ensurePublishBranch: function(publishBranch) {\n        if (publishBranch == null) {\n          publishBranch = self.publishBranch();\n        }\n        return get(\"branches/\" + publishBranch).then(null, function(request) {\n          if (request.status === 404) {\n            return self.initPublishBranch();\n          }\n        });\n      },\n      publish: function(data, ref) {\n        var message, name, publishBranch, tree;\n        if (ref == null) {\n          ref = self.branch();\n        }\n        message = \"\" + (emojis()) + \" Built \" + ref + \" in browser in strd6.github.io/editor\";\n        name = ref;\n        publishBranch = self.publishBranch();\n        tree = Object.keys(data).map(function(extension) {\n          return {\n            path: \"\" + name + \".\" + extension,\n            content: data[extension]\n          };\n        });\n        if (ref === self.defaultBranch()) {\n          tree.push({\n            path: \"index.html\",\n            content: data.html\n          });\n        }\n        return self.ensurePublishBranch(publishBranch).then(function() {\n          return self.commitTree({\n            baseTree: true,\n            tree: tree,\n            branch: publishBranch\n          });\n        });\n      }\n    });\n    Object.extend(self, {\n      get: get,\n      put: put,\n      post: post,\n      patch: patch\n    });\n    return self;\n  };\n\n  module.exports = Repository;\n\n  cacheBuster = function() {\n    return \"?\" + (+(new Date));\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "test/emojer": {
          "path": "test/emojer",
          "content": "(function() {\n  var emojer;\n\n  emojer = require(\"emojer\");\n\n  describe(\"emojer\", function() {\n    return it(\"should generate emoji\", function() {\n      return assert(emojer());\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        },
        "test/github": {
          "path": "test/github",
          "content": "(function() {\n  var Github;\n\n  Github = require(\"../main\");\n\n  describe(\"Github\", function() {\n    it(\"Should be able to construct repositories\", function() {\n      assert(Github().repository);\n      return assert(Github().Repository);\n    });\n    it(\"should have authorizationUrl as an instance method\", function() {\n      return assert(Github().authorizationUrl);\n    });\n    return describe(\"Repository\", function() {\n      var expectUrlToMatch, expected, repository, testRequester;\n      expected = null;\n      expectUrlToMatch = function(regex) {\n        return expected = regex;\n      };\n      testRequester = function(url, data) {\n        var match;\n        match = url.match(expected);\n        assert.equal(!!match, true, \"\" + url + \" did not match \" + expected + \", \" + match);\n        return {\n          then: function() {}\n        };\n      };\n      repository = Github().Repository({\n        url: \"STRd6/testin\",\n        requester: testRequester\n      });\n      it(\"should cache bust the latest commit\", function() {\n        expectUrlToMatch(/.*\\?\\d+/);\n        return repository.latestCommit();\n      });\n      return it(\"should create a merge when asked\", function() {\n        expectUrlToMatch(/STRd6\\/testin\\/merges/);\n        return repository.mergeInto();\n      });\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "entryPoint": "main",
      "dependencies": {
        "emojer": {
          "source": {
            "LICENSE": {
              "path": "LICENSE",
              "mode": "100644",
              "content": "The MIT License (MIT)\n\nCopyright (c) 2013 CanastaNasty\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
              "type": "blob"
            },
            "README.md": {
              "path": "README.md",
              "mode": "100644",
              "content": "emojer\n======\n\nRandomly returns a Github emoji\n",
              "type": "blob"
            },
            "main.js": {
              "path": "main.js",
              "mode": "100644",
              "content": "var emojis = \n  [\":bowtie:\"\n\t,\":smile:\"\n\t,\":laughing:\"\n\t,\":blush:\"\n\t,\":smiley:\"\n\t,\":relaxed:\"\n\t,\":smirk:\"\n\t,\":heart_eyes:\"\n\t,\":kissing_heart:\"\n\t,\":kissing_closed_eyes:\"\n\t,\":flushed:\"\n\t,\":relieved:\"\n\t,\":satisfied:\"\n\t,\":grin:\"\n\t,\":wink:\"\n\t,\":stuck_out_tongue_winking_eye:\"\n\t,\":stuck_out_tongue_closed_eyes:\"\n\t,\":grinning:\"\n\t,\":kissing:\"\n\t,\":kissing_smiling_eyes:\"\n\t,\":stuck_out_tongue:\"\n\t,\":sleeping:\"\n\t,\":worried:\"\n\t,\":frowning:\"\n\t,\":anguished:\"\n\t,\":open_mouth:\"\n\t,\":grimacing:\"\n\t,\":confused:\"\n\t,\":hushed:\"\n\t,\":expressionless:\"\n\t,\":unamused:\"\n\t,\":sweat_smile:\"\n\t,\":sweat:\"\n\t,\":disappointed_relieved:\"\n\t,\":weary:\"\n\t,\":pensive:\"\n\t,\":disappointed:\"\n\t,\":confounded:\"\n\t,\":fearful:\"\n\t,\":cold_sweat:\"\n\t,\":persevere:\"\n\t,\":cry:\"\n\t,\":sob:\"\n\t,\":joy:\"\n\t,\":astonished:\"\n\t,\":scream:\"\n\t,\":neckbeard:\"\n\t,\":tired_face:\"\n\t,\":angry:\"\n\t,\":rage:\"\n\t,\":triumph:\"\n\t,\":sleepy:\"\n\t,\":yum:\"\n\t,\":mask:\"\n\t,\":sunglasses:\"\n\t,\":dizzy_face:\"\n\t,\":imp:\"\n\t,\":smiling_imp:\"\n\t,\":neutral_face:\"\n\t,\":no_mouth:\"\n\t,\":innocent:\"\n\t,\":alien:\"\n\t,\":yellow_heart:\"\n\t,\":blue_heart:\"\n\t,\":purple_heart:\"\n\t,\":heart:\"\n\t,\":green_heart:\"\n\t,\":broken_heart:\"\n\t,\":heartbeat:\"\n\t,\":heartpulse:\"\n\t,\":two_hearts:\"\n\t,\":revolving_hearts:\"\n\t,\":cupid:\"\n\t,\":sparkling_heart:\"\n\t,\":sparkles:\"\n\t,\":star:\"\n\t,\":star2:\"\n\t,\":dizzy:\"\n\t,\":boom:\"\n\t,\":collision:\"\n\t,\":anger:\"\n\t,\":exclamation:\"\n\t,\":question:\"\n\t,\":grey_exclamation:\"\n\t,\":grey_question:\"\n\t,\":zzz:\"\n\t,\":dash:\"\n\t,\":sweat_drops:\"\n\t,\":notes:\"\n\t,\":musical_note:\"\n\t,\":fire:\"\n\t,\":hankey:\"\n\t,\":poop:\"\n\t,\":shit:\"\n\t,\":+1:\"\n\t,\":thumbsup:\"\n\t,\":-1:\"\n\t,\":thumbsdown:\"\n\t,\":ok_hand:\"\n\t,\":punch:\"\n\t,\":facepunch:\"\n\t,\":fist:\"\n\t,\":v:\"\n\t,\":wave:\"\n\t,\":hand:\"\n\t,\":raised_hand:\"\n\t,\":open_hands:\"\n\t,\":point_up:\"\n\t,\":point_down:\"\n\t,\":point_left:\"\n\t,\":point_right:\"\n\t,\":raised_hands:\"\n\t,\":pray:\"\n\t,\":point_up_2:\"\n\t,\":clap:\"\n\t,\":muscle:\"\n\t,\":metal:\"\n\t,\":fu:\"\n\t,\":walking:\"\n\t,\":runner:\"\n\t,\":running:\"\n\t,\":couple:\"\n\t,\":family:\"\n\t,\":two_men_holding_hands:\"\n\t,\":two_women_holding_hands:\"\n\t,\":dancer:\"\n\t,\":dancers:\"\n\t,\":ok_woman:\"\n\t,\":no_good:\"\n\t,\":information_desk_person:\"\n\t,\":raising_hand:\"\n\t,\":bride_with_veil:\"\n\t,\":person_with_pouting_face:\"\n\t,\":person_frowning:\"\n\t,\":bow:\"\n\t,\":couplekiss:\"\n\t,\":couple_with_heart:\"\n\t,\":massage:\"\n\t,\":haircut:\"\n\t,\":nail_care:\"\n\t,\":boy:\"\n\t,\":girl:\"\n\t,\":woman:\"\n\t,\":man:\"\n\t,\":baby:\"\n\t,\":older_woman:\"\n\t,\":older_man:\"\n\t,\":person_with_blond_hair:\"\n\t,\":man_with_gua_pi_mao:\"\n\t,\":man_with_turban:\"\n\t,\":construction_worker:\"\n\t,\":cop:\"\n\t,\":angel:\"\n\t,\":princess:\"\n\t,\":smiley_cat:\"\n\t,\":smile_cat:\"\n\t,\":heart_eyes_cat:\"\n\t,\":kissing_cat:\"\n\t,\":smirk_cat:\"\n\t,\":scream_cat:\"\n\t,\":crying_cat_face:\"\n\t,\":joy_cat:\"\n\t,\":pouting_cat:\"\n\t,\":japanese_ogre:\"\n\t,\":japanese_goblin:\"\n\t,\":see_no_evil:\"\n\t,\":hear_no_evil:\"\n\t,\":speak_no_evil:\"\n\t,\":guardsman:\"\n\t,\":skull:\"\n\t,\":feet:\"\n\t,\":lips:\"\n\t,\":kiss:\"\n\t,\":droplet:\"\n\t,\":ear:\"\n\t,\":eyes:\"\n\t,\":nose:\"\n\t,\":tongue:\"\n\t,\":love_letter:\"\n\t,\":bust_in_silhouette:\"\n\t,\":busts_in_silhouette:\"\n\t,\":speech_balloon:\"\n\t,\":thought_balloon:\"\n\t,\":feelsgood:\"\n\t,\":finnadie:\"\n\t,\":goberserk:\"\n\t,\":godmode:\"\n\t,\":hurtrealbad:\"\n\t,\":rage1:\"\n\t,\":rage2:\"\n\t,\":rage3:\"\n\t,\":rage4:\"\n\t,\":suspect:\"\n\t,\":trollface:\"\n\t,\":sunny:\"\n\t,\":umbrella:\"\n\t,\":cloud:\"\n\t,\":snowflake:\"\n\t,\":snowman:\"\n\t,\":zap:\"\n\t,\":cyclone:\"\n\t,\":foggy:\"\n\t,\":ocean:\"\n\t,\":cat:\"\n\t,\":dog:\"\n\t,\":mouse:\"\n\t,\":hamster:\"\n\t,\":rabbit:\"\n\t,\":wolf:\"\n\t,\":frog:\"\n\t,\":tiger:\"\n\t,\":koala:\"\n\t,\":bear:\"\n\t,\":pig:\"\n\t,\":pig_nose:\"\n\t,\":cow:\"\n\t,\":boar:\"\n\t,\":monkey_face:\"\n\t,\":monkey:\"\n\t,\":horse:\"\n\t,\":racehorse:\"\n\t,\":camel:\"\n\t,\":sheep:\"\n\t,\":elephant:\"\n\t,\":panda_face:\"\n\t,\":snake:\"\n\t,\":bird:\"\n\t,\":baby_chick:\"\n\t,\":hatched_chick:\"\n\t,\":hatching_chick:\"\n\t,\":chicken:\"\n\t,\":penguin:\"\n\t,\":turtle:\"\n\t,\":bug:\"\n\t,\":honeybee:\"\n\t,\":ant:\"\n\t,\":beetle:\"\n\t,\":snail:\"\n\t,\":octopus:\"\n\t,\":tropical_fish:\"\n\t,\":fish:\"\n\t,\":whale:\"\n\t,\":whale2:\"\n\t,\":dolphin:\"\n\t,\":cow2:\"\n\t,\":ram:\"\n\t,\":rat:\"\n\t,\":water_buffalo:\"\n\t,\":tiger2:\"\n\t,\":rabbit2:\"\n\t,\":dragon:\"\n\t,\":goat:\"\n\t,\":rooster:\"\n\t,\":dog2:\"\n\t,\":pig2:\"\n\t,\":mouse2:\"\n\t,\":ox:\"\n\t,\":dragon_face:\"\n\t,\":blowfish:\"\n\t,\":crocodile:\"\n\t,\":dromedary_camel:\"\n\t,\":leopard:\"\n\t,\":cat2:\"\n\t,\":poodle:\"\n\t,\":paw_prints:\"\n\t,\":bouquet:\"\n\t,\":cherry_blossom:\"\n\t,\":tulip:\"\n\t,\":four_leaf_clover:\"\n\t,\":rose:\"\n\t,\":sunflower:\"\n\t,\":hibiscus:\"\n\t,\":maple_leaf:\"\n\t,\":leaves:\"\n\t,\":fallen_leaf:\"\n\t,\":herb:\"\n\t,\":mushroom:\"\n\t,\":cactus:\"\n\t,\":palm_tree:\"\n\t,\":evergreen_tree:\"\n\t,\":deciduous_tree:\"\n\t,\":chestnut:\"\n\t,\":seedling:\"\n\t,\":blossom:\"\n\t,\":ear_of_rice:\"\n\t,\":shell:\"\n\t,\":globe_with_meridians:\"\n\t,\":sun_with_face:\"\n\t,\":full_moon_with_face:\"\n\t,\":new_moon_with_face:\"\n\t,\":new_moon:\"\n\t,\":waxing_crescent_moon:\"\n\t,\":first_quarter_moon:\"\n\t,\":waxing_gibbous_moon:\"\n\t,\":full_moon:\"\n\t,\":waning_gibbous_moon:\"\n\t,\":last_quarter_moon:\"\n\t,\":waning_crescent_moon:\"\n\t,\":last_quarter_moon_with_face:\"\n\t,\":first_quarter_moon_with_face:\"\n\t,\":moon:\"\n\t,\":earth_africa:\"\n\t,\":earth_americas:\"\n\t,\":earth_asia:\"\n\t,\":volcano:\"\n\t,\":milky_way:\"\n\t,\":partly_sunny:\"\n\t,\":octocat:\"\n\t,\":squirrel:\"\n\t,\":bamboo:\"\n\t,\":gift_heart:\"\n\t,\":dolls:\"\n\t,\":school_satchel:\"\n\t,\":mortar_board:\"\n\t,\":flags:\"\n\t,\":fireworks:\"\n\t,\":sparkler:\"\n\t,\":wind_chime:\"\n\t,\":rice_scene:\"\n\t,\":jack_o_lantern:\"\n\t,\":ghost:\"\n\t,\":santa:\"\n\t,\":christmas_tree:\"\n\t,\":gift:\"\n\t,\":bell:\"\n\t,\":no_bell:\"\n\t,\":tanabata_tree:\"\n\t,\":tada:\"\n\t,\":confetti_ball:\"\n\t,\":balloon:\"\n\t,\":crystal_ball:\"\n\t,\":cd:\"\n\t,\":dvd:\"\n\t,\":floppy_disk:\"\n\t,\":camera:\"\n\t,\":video_camera:\"\n\t,\":movie_camera:\"\n\t,\":computer:\"\n\t,\":tv:\"\n\t,\":iphone:\"\n\t,\":phone:\"\n\t,\":telephone:\"\n\t,\":telephone_receiver:\"\n\t,\":pager:\"\n\t,\":fax:\"\n\t,\":minidisc:\"\n\t,\":vhs:\"\n\t,\":sound:\"\n\t,\":speaker:\"\n\t,\":mute:\"\n\t,\":loudspeaker:\"\n\t,\":mega:\"\n\t,\":hourglass:\"\n\t,\":hourglass_flowing_sand:\"\n\t,\":alarm_clock:\"\n\t,\":watch:\"\n\t,\":radio:\"\n\t,\":satellite:\"\n\t,\":loop:\"\n\t,\":mag:\"\n\t,\":mag_right:\"\n\t,\":unlock:\"\n\t,\":lock:\"\n\t,\":lock_with_ink_pen:\"\n\t,\":closed_lock_with_key:\"\n\t,\":key:\"\n\t,\":bulb:\"\n\t,\":flashlight:\"\n\t,\":high_brightness:\"\n\t,\":low_brightness:\"\n\t,\":electric_plug:\"\n\t,\":battery:\"\n\t,\":calling:\"\n\t,\":email:\"\n\t,\":mailbox:\"\n\t,\":postbox:\"\n\t,\":bath:\"\n\t,\":bathtub:\"\n\t,\":shower:\"\n\t,\":toilet:\"\n\t,\":wrench:\"\n\t,\":nut_and_bolt:\"\n\t,\":hammer:\"\n\t,\":seat:\"\n\t,\":moneybag:\"\n\t,\":yen:\"\n\t,\":dollar:\"\n\t,\":pound:\"\n\t,\":euro:\"\n\t,\":credit_card:\"\n\t,\":money_with_wings:\"\n\t,\":e-mail:\"\n\t,\":inbox_tray:\"\n\t,\":outbox_tray:\"\n\t,\":envelope:\"\n\t,\":incoming_envelope:\"\n\t,\":postal_horn:\"\n\t,\":mailbox_closed:\"\n\t,\":mailbox_with_mail:\"\n\t,\":mailbox_with_no_mail:\"\n\t,\":door:\"\n\t,\":smoking:\"\n\t,\":bomb:\"\n\t,\":gun:\"\n\t,\":hocho:\"\n\t,\":pill:\"\n\t,\":syringe:\"\n\t,\":page_facing_up:\"\n\t,\":page_with_curl:\"\n\t,\":bookmark_tabs:\"\n\t,\":bar_chart:\"\n\t,\":chart_with_upwards_trend:\"\n\t,\":chart_with_downwards_trend:\"\n\t,\":scroll:\"\n\t,\":clipboard:\"\n\t,\":calendar:\"\n\t,\":date:\"\n\t,\":card_index:\"\n\t,\":file_folder:\"\n\t,\":open_file_folder:\"\n\t,\":scissors:\"\n\t,\":pushpin:\"\n\t,\":paperclip:\"\n\t,\":black_nib:\"\n\t,\":pencil2:\"\n\t,\":straight_ruler:\"\n\t,\":triangular_ruler:\"\n\t,\":closed_book:\"\n\t,\":green_book:\"\n\t,\":blue_book:\"\n\t,\":orange_book:\"\n\t,\":notebook:\"\n\t,\":notebook_with_decorative_cover:\"\n\t,\":ledger:\"\n\t,\":books:\"\n\t,\":bookmark:\"\n\t,\":name_badge:\"\n\t,\":microscope:\"\n\t,\":telescope:\"\n\t,\":newspaper:\"\n\t,\":football:\"\n\t,\":basketball:\"\n\t,\":soccer:\"\n\t,\":baseball:\"\n\t,\":tennis:\"\n\t,\":8ball:\"\n\t,\":rugby_football:\"\n\t,\":bowling:\"\n\t,\":golf:\"\n\t,\":mountain_bicyclist:\"\n\t,\":bicyclist:\"\n\t,\":horse_racing:\"\n\t,\":snowboarder:\"\n\t,\":swimmer:\"\n\t,\":surfer:\"\n\t,\":ski:\"\n\t,\":spades:\"\n\t,\":hearts:\"\n\t,\":clubs:\"\n\t,\":diamonds:\"\n\t,\":gem:\"\n\t,\":ring:\"\n\t,\":trophy:\"\n\t,\":musical_score:\"\n\t,\":musical_keyboard:\"\n\t,\":violin:\"\n\t,\":space_invader:\"\n\t,\":video_game:\"\n\t,\":black_joker:\"\n\t,\":flower_playing_cards:\"\n\t,\":game_die:\"\n\t,\":dart:\"\n\t,\":mahjong:\"\n\t,\":clapper:\"\n\t,\":memo:\"\n\t,\":pencil:\"\n\t,\":book:\"\n\t,\":art:\"\n\t,\":microphone:\"\n\t,\":headphones:\"\n\t,\":trumpet:\"\n\t,\":saxophone:\"\n\t,\":guitar:\"\n\t,\":shoe:\"\n\t,\":sandal:\"\n\t,\":high_heel:\"\n\t,\":lipstick:\"\n\t,\":boot:\"\n\t,\":shirt:\"\n\t,\":tshirt:\"\n\t,\":necktie:\"\n\t,\":womans_clothes:\"\n\t,\":dress:\"\n\t,\":running_shirt_with_sash:\"\n\t,\":jeans:\"\n\t,\":kimono:\"\n\t,\":bikini:\"\n\t,\":ribbon:\"\n\t,\":tophat:\"\n\t,\":crown:\"\n\t,\":womans_hat:\"\n\t,\":mans_shoe:\"\n\t,\":closed_umbrella:\"\n\t,\":briefcase:\"\n\t,\":handbag:\"\n\t,\":pouch:\"\n\t,\":purse:\"\n\t,\":eyeglasses:\"\n\t,\":fishing_pole_and_fish:\"\n\t,\":coffee:\"\n\t,\":tea:\"\n\t,\":sake:\"\n\t,\":baby_bottle:\"\n\t,\":beer:\"\n\t,\":beers:\"\n\t,\":cocktail:\"\n\t,\":tropical_drink:\"\n\t,\":wine_glass:\"\n\t,\":fork_and_knife:\"\n\t,\":pizza:\"\n\t,\":hamburger:\"\n\t,\":fries:\"\n\t,\":poultry_leg:\"\n\t,\":meat_on_bone:\"\n\t,\":spaghetti:\"\n\t,\":curry:\"\n\t,\":fried_shrimp:\"\n\t,\":bento:\"\n\t,\":sushi:\"\n\t,\":fish_cake:\"\n\t,\":rice_ball:\"\n\t,\":rice_cracker:\"\n\t,\":rice:\"\n\t,\":ramen:\"\n\t,\":stew:\"\n\t,\":oden:\"\n\t,\":dango:\"\n\t,\":egg:\"\n\t,\":bread:\"\n\t,\":doughnut:\"\n\t,\":custard:\"\n\t,\":icecream:\"\n\t,\":ice_cream:\"\n\t,\":shaved_ice:\"\n\t,\":birthday:\"\n\t,\":cake:\"\n\t,\":cookie:\"\n\t,\":chocolate_bar:\"\n\t,\":candy:\"\n\t,\":lollipop:\"\n\t,\":honey_pot:\"\n\t,\":apple:\"\n\t,\":green_apple:\"\n\t,\":tangerine:\"\n\t,\":lemon:\"\n\t,\":cherries:\"\n\t,\":grapes:\"\n\t,\":watermelon:\"\n\t,\":strawberry:\"\n\t,\":peach:\"\n\t,\":melon:\"\n\t,\":banana:\"\n\t,\":pear:\"\n\t,\":pineapple:\"\n\t,\":sweet_potato:\"\n\t,\":eggplant:\"\n\t,\":tomato:\"\n\t,\":corn:\"\n\t,\":house:\"\n\t,\":house_with_garden:\"\n\t,\":school:\"\n\t,\":office:\"\n\t,\":post_office:\"\n\t,\":hospital:\"\n\t,\":bank:\"\n\t,\":convenience_store:\"\n\t,\":love_hotel:\"\n\t,\":hotel:\"\n\t,\":wedding:\"\n\t,\":church:\"\n\t,\":department_store:\"\n\t,\":european_post_office:\"\n\t,\":city_sunrise:\"\n\t,\":city_sunset:\"\n\t,\":japanese_castle:\"\n\t,\":european_castle:\"\n\t,\":tent:\"\n\t,\":factory:\"\n\t,\":tokyo_tower:\"\n\t,\":japan:\"\n\t,\":mount_fuji:\"\n\t,\":sunrise_over_mountains:\"\n\t,\":sunrise:\"\n\t,\":stars:\"\n\t,\":statue_of_liberty:\"\n\t,\":bridge_at_night:\"\n\t,\":carousel_horse:\"\n\t,\":rainbow:\"\n\t,\":ferris_wheel:\"\n\t,\":fountain:\"\n\t,\":roller_coaster:\"\n\t,\":ship:\"\n\t,\":speedboat:\"\n\t,\":boat:\"\n\t,\":sailboat:\"\n\t,\":rowboat:\"\n\t,\":anchor:\"\n\t,\":rocket:\"\n\t,\":airplane:\"\n\t,\":helicopter:\"\n\t,\":steam_locomotive:\"\n\t,\":tram:\"\n\t,\":mountain_railway:\"\n\t,\":bike:\"\n\t,\":aerial_tramway:\"\n\t,\":suspension_railway:\"\n\t,\":mountain_cableway:\"\n\t,\":tractor:\"\n\t,\":blue_car:\"\n\t,\":oncoming_automobile:\"\n\t,\":car:\"\n\t,\":red_car:\"\n\t,\":taxi:\"\n\t,\":oncoming_taxi:\"\n\t,\":articulated_lorry:\"\n\t,\":bus:\"\n\t,\":oncoming_bus:\"\n\t,\":rotating_light:\"\n\t,\":police_car:\"\n\t,\":oncoming_police_car:\"\n\t,\":fire_engine:\"\n\t,\":ambulance:\"\n\t,\":minibus:\"\n\t,\":truck:\"\n\t,\":train:\"\n\t,\":station:\"\n\t,\":train2:\"\n\t,\":bullettrain_front:\"\n\t,\":bullettrain_side:\"\n\t,\":light_rail:\"\n\t,\":monorail:\"\n\t,\":railway_car:\"\n\t,\":trolleybus:\"\n\t,\":ticket:\"\n\t,\":fuelpump:\"\n\t,\":vertical_traffic_light:\"\n\t,\":traffic_light:\"\n\t,\":warning:\"\n\t,\":construction:\"\n\t,\":beginner:\"\n\t,\":atm:\"\n\t,\":slot_machine:\"\n\t,\":busstop:\"\n\t,\":barber:\"\n\t,\":hotsprings:\"\n\t,\":checkered_flag:\"\n\t,\":crossed_flags:\"\n\t,\":izakaya_lantern:\"\n\t,\":moyai:\"\n\t,\":circus_tent:\"\n\t,\":performing_arts:\"\n\t,\":round_pushpin:\"\n\t,\":triangular_flag_on_post:\"\n\t,\":jp:\"\n\t,\":kr:\"\n\t,\":cn:\"\n\t,\":us:\"\n\t,\":fr:\"\n\t,\":es:\"\n\t,\":it:\"\n\t,\":ru:\"\n\t,\":gb:\"\n\t,\":uk:\"\n\t,\":de:\"\n\t,\":one:\"\n\t,\":two:\"\n\t,\":three:\"\n\t,\":four:\"\n\t,\":five:\"\n\t,\":six:\"\n\t,\":seven:\"\n\t,\":eight:\"\n\t,\":nine:\"\n\t,\":keycap_ten:\"\n\t,\":1234:\"\n\t,\":zero:\"\n\t,\":hash:\"\n\t,\":symbols:\"\n\t,\":arrow_backward:\"\n\t,\":arrow_down:\"\n\t,\":arrow_forward:\"\n\t,\":arrow_left:\"\n\t,\":capital_abcd:\"\n\t,\":abcd:\"\n\t,\":abc:\"\n\t,\":arrow_lower_left:\"\n\t,\":arrow_lower_right:\"\n\t,\":arrow_right:\"\n\t,\":arrow_up:\"\n\t,\":arrow_upper_left:\"\n\t,\":arrow_upper_right:\"\n\t,\":arrow_double_down:\"\n\t,\":arrow_double_up:\"\n\t,\":arrow_down_small:\"\n\t,\":arrow_heading_down:\"\n\t,\":arrow_heading_up:\"\n\t,\":leftwards_arrow_with_hook:\"\n\t,\":arrow_right_hook:\"\n\t,\":left_right_arrow:\"\n\t,\":arrow_up_down:\"\n\t,\":arrow_up_small:\"\n\t,\":arrows_clockwise:\"\n\t,\":arrows_counterclockwise:\"\n\t,\":rewind:\"\n\t,\":fast_forward:\"\n\t,\":information_source:\"\n\t,\":ok:\"\n\t,\":twisted_rightwards_arrows:\"\n\t,\":repeat:\"\n\t,\":repeat_one:\"\n\t,\":new:\"\n\t,\":top:\"\n\t,\":up:\"\n\t,\":cool:\"\n\t,\":free:\"\n\t,\":ng:\"\n\t,\":cinema:\"\n\t,\":koko:\"\n\t,\":signal_strength:\"\n\t,\":u5272:\"\n\t,\":u5408:\"\n\t,\":u55b6:\"\n\t,\":u6307:\"\n\t,\":u6708:\"\n\t,\":u6709:\"\n\t,\":u6e80:\"\n\t,\":u7121:\"\n\t,\":u7533:\"\n\t,\":u7a7a:\"\n\t,\":u7981:\"\n\t,\":sa:\"\n\t,\":restroom:\"\n\t,\":mens:\"\n\t,\":womens:\"\n\t,\":baby_symbol:\"\n\t,\":no_smoking:\"\n\t,\":parking:\"\n\t,\":wheelchair:\"\n\t,\":metro:\"\n\t,\":baggage_claim:\"\n\t,\":accept:\"\n\t,\":wc:\"\n\t,\":potable_water:\"\n\t,\":put_litter_in_its_place:\"\n\t,\":secret:\"\n\t,\":congratulations:\"\n\t,\":m:\"\n\t,\":passport_control:\"\n\t,\":left_luggage:\"\n\t,\":customs:\"\n\t,\":ideograph_advantage:\"\n\t,\":cl:\"\n\t,\":sos:\"\n\t,\":id:\"\n\t,\":no_entry_sign:\"\n\t,\":underage:\"\n\t,\":no_mobile_phones:\"\n\t,\":do_not_litter:\"\n\t,\":non-potable_water:\"\n\t,\":no_bicycles:\"\n\t,\":no_pedestrians:\"\n\t,\":children_crossing:\"\n\t,\":no_entry:\"\n\t,\":eight_spoked_asterisk:\"\n\t,\":eight_pointed_black_star:\"\n\t,\":heart_decoration:\"\n\t,\":vs:\"\n\t,\":vibration_mode:\"\n\t,\":mobile_phone_off:\"\n\t,\":chart:\"\n\t,\":currency_exchange:\"\n\t,\":aries:\"\n\t,\":taurus:\"\n\t,\":gemini:\"\n\t,\":cancer:\"\n\t,\":leo:\"\n\t,\":virgo:\"\n\t,\":libra:\"\n\t,\":scorpius:\"\n\t,\":sagittarius:\"\n\t,\":capricorn:\"\n\t,\":aquarius:\"\n\t,\":pisces:\"\n\t,\":ophiuchus:\"\n\t,\":six_pointed_star:\"\n\t,\":negative_squared_cross_mark:\"\n\t,\":a:\"\n\t,\":b:\"\n\t,\":ab:\"\n\t,\":o2:\"\n\t,\":diamond_shape_with_a_dot_inside:\"\n\t,\":recycle:\"\n\t,\":end:\"\n\t,\":on:\"\n\t,\":soon:\"\n\t,\":clock1:\"\n\t,\":clock130:\"\n\t,\":clock10:\"\n\t,\":clock1030:\"\n\t,\":clock11:\"\n\t,\":clock1130:\"\n\t,\":clock12:\"\n\t,\":clock1230:\"\n\t,\":clock2:\"\n\t,\":clock230:\"\n\t,\":clock3:\"\n\t,\":clock330:\"\n\t,\":clock4:\"\n\t,\":clock430:\"\n\t,\":clock5:\"\n\t,\":clock530:\"\n\t,\":clock6:\"\n\t,\":clock630:\"\n\t,\":clock7:\"\n\t,\":clock730:\"\n\t,\":clock8:\"\n\t,\":clock830:\"\n\t,\":clock9:\"\n\t,\":clock930:\"\n\t,\":heavy_dollar_sign:\"\n\t,\":copyright:\"\n\t,\":registered:\"\n\t,\":tm:\"\n\t,\":x:\"\n\t,\":heavy_exclamation_mark:\"\n\t,\":bangbang:\"\n\t,\":interrobang:\"\n\t,\":o:\"\n\t,\":heavy_multiplication_x:\"\n\t,\":heavy_plus_sign:\"\n\t,\":heavy_minus_sign:\"\n\t,\":heavy_division_sign:\"\n\t,\":white_flower:\"\n\t,\":100:\"\n\t,\":heavy_check_mark:\"\n\t,\":ballot_box_with_check:\"\n\t,\":radio_button:\"\n\t,\":link:\"\n\t,\":curly_loop:\"\n\t,\":wavy_dash:\"\n\t,\":part_alternation_mark:\"\n\t,\":trident:\"\n\t,\":black_square:\"\n\t,\":white_square:\"\n\t,\":white_check_mark:\"\n\t,\":black_square_button:\"\n\t,\":white_square_button:\"\n\t,\":black_circle:\"\n\t,\":white_circle:\"\n\t,\":red_circle:\"\n\t,\":large_blue_circle:\"\n\t,\":large_blue_diamond:\"\n\t,\":large_orange_diamond:\"\n\t,\":small_blue_diamond:\"\n\t,\":small_orange_diamond:\"\n\t,\":small_red_triangle:\"\n\t,\":small_red_triangle_down:\"\n\t,\":shipit:\"\n]\n\nfunction emojer () {\n\tindex = Math.floor(Math.random()*emojis.length)\n\treturn emojis[index]\n}\n\nmodule.exports = emojer\n",
              "type": "blob"
            }
          },
          "distribution": {
            "main": {
              "path": "main",
              "content": "var emojis = \n  [\":bowtie:\"\n\t,\":smile:\"\n\t,\":laughing:\"\n\t,\":blush:\"\n\t,\":smiley:\"\n\t,\":relaxed:\"\n\t,\":smirk:\"\n\t,\":heart_eyes:\"\n\t,\":kissing_heart:\"\n\t,\":kissing_closed_eyes:\"\n\t,\":flushed:\"\n\t,\":relieved:\"\n\t,\":satisfied:\"\n\t,\":grin:\"\n\t,\":wink:\"\n\t,\":stuck_out_tongue_winking_eye:\"\n\t,\":stuck_out_tongue_closed_eyes:\"\n\t,\":grinning:\"\n\t,\":kissing:\"\n\t,\":kissing_smiling_eyes:\"\n\t,\":stuck_out_tongue:\"\n\t,\":sleeping:\"\n\t,\":worried:\"\n\t,\":frowning:\"\n\t,\":anguished:\"\n\t,\":open_mouth:\"\n\t,\":grimacing:\"\n\t,\":confused:\"\n\t,\":hushed:\"\n\t,\":expressionless:\"\n\t,\":unamused:\"\n\t,\":sweat_smile:\"\n\t,\":sweat:\"\n\t,\":disappointed_relieved:\"\n\t,\":weary:\"\n\t,\":pensive:\"\n\t,\":disappointed:\"\n\t,\":confounded:\"\n\t,\":fearful:\"\n\t,\":cold_sweat:\"\n\t,\":persevere:\"\n\t,\":cry:\"\n\t,\":sob:\"\n\t,\":joy:\"\n\t,\":astonished:\"\n\t,\":scream:\"\n\t,\":neckbeard:\"\n\t,\":tired_face:\"\n\t,\":angry:\"\n\t,\":rage:\"\n\t,\":triumph:\"\n\t,\":sleepy:\"\n\t,\":yum:\"\n\t,\":mask:\"\n\t,\":sunglasses:\"\n\t,\":dizzy_face:\"\n\t,\":imp:\"\n\t,\":smiling_imp:\"\n\t,\":neutral_face:\"\n\t,\":no_mouth:\"\n\t,\":innocent:\"\n\t,\":alien:\"\n\t,\":yellow_heart:\"\n\t,\":blue_heart:\"\n\t,\":purple_heart:\"\n\t,\":heart:\"\n\t,\":green_heart:\"\n\t,\":broken_heart:\"\n\t,\":heartbeat:\"\n\t,\":heartpulse:\"\n\t,\":two_hearts:\"\n\t,\":revolving_hearts:\"\n\t,\":cupid:\"\n\t,\":sparkling_heart:\"\n\t,\":sparkles:\"\n\t,\":star:\"\n\t,\":star2:\"\n\t,\":dizzy:\"\n\t,\":boom:\"\n\t,\":collision:\"\n\t,\":anger:\"\n\t,\":exclamation:\"\n\t,\":question:\"\n\t,\":grey_exclamation:\"\n\t,\":grey_question:\"\n\t,\":zzz:\"\n\t,\":dash:\"\n\t,\":sweat_drops:\"\n\t,\":notes:\"\n\t,\":musical_note:\"\n\t,\":fire:\"\n\t,\":hankey:\"\n\t,\":poop:\"\n\t,\":shit:\"\n\t,\":+1:\"\n\t,\":thumbsup:\"\n\t,\":-1:\"\n\t,\":thumbsdown:\"\n\t,\":ok_hand:\"\n\t,\":punch:\"\n\t,\":facepunch:\"\n\t,\":fist:\"\n\t,\":v:\"\n\t,\":wave:\"\n\t,\":hand:\"\n\t,\":raised_hand:\"\n\t,\":open_hands:\"\n\t,\":point_up:\"\n\t,\":point_down:\"\n\t,\":point_left:\"\n\t,\":point_right:\"\n\t,\":raised_hands:\"\n\t,\":pray:\"\n\t,\":point_up_2:\"\n\t,\":clap:\"\n\t,\":muscle:\"\n\t,\":metal:\"\n\t,\":fu:\"\n\t,\":walking:\"\n\t,\":runner:\"\n\t,\":running:\"\n\t,\":couple:\"\n\t,\":family:\"\n\t,\":two_men_holding_hands:\"\n\t,\":two_women_holding_hands:\"\n\t,\":dancer:\"\n\t,\":dancers:\"\n\t,\":ok_woman:\"\n\t,\":no_good:\"\n\t,\":information_desk_person:\"\n\t,\":raising_hand:\"\n\t,\":bride_with_veil:\"\n\t,\":person_with_pouting_face:\"\n\t,\":person_frowning:\"\n\t,\":bow:\"\n\t,\":couplekiss:\"\n\t,\":couple_with_heart:\"\n\t,\":massage:\"\n\t,\":haircut:\"\n\t,\":nail_care:\"\n\t,\":boy:\"\n\t,\":girl:\"\n\t,\":woman:\"\n\t,\":man:\"\n\t,\":baby:\"\n\t,\":older_woman:\"\n\t,\":older_man:\"\n\t,\":person_with_blond_hair:\"\n\t,\":man_with_gua_pi_mao:\"\n\t,\":man_with_turban:\"\n\t,\":construction_worker:\"\n\t,\":cop:\"\n\t,\":angel:\"\n\t,\":princess:\"\n\t,\":smiley_cat:\"\n\t,\":smile_cat:\"\n\t,\":heart_eyes_cat:\"\n\t,\":kissing_cat:\"\n\t,\":smirk_cat:\"\n\t,\":scream_cat:\"\n\t,\":crying_cat_face:\"\n\t,\":joy_cat:\"\n\t,\":pouting_cat:\"\n\t,\":japanese_ogre:\"\n\t,\":japanese_goblin:\"\n\t,\":see_no_evil:\"\n\t,\":hear_no_evil:\"\n\t,\":speak_no_evil:\"\n\t,\":guardsman:\"\n\t,\":skull:\"\n\t,\":feet:\"\n\t,\":lips:\"\n\t,\":kiss:\"\n\t,\":droplet:\"\n\t,\":ear:\"\n\t,\":eyes:\"\n\t,\":nose:\"\n\t,\":tongue:\"\n\t,\":love_letter:\"\n\t,\":bust_in_silhouette:\"\n\t,\":busts_in_silhouette:\"\n\t,\":speech_balloon:\"\n\t,\":thought_balloon:\"\n\t,\":feelsgood:\"\n\t,\":finnadie:\"\n\t,\":goberserk:\"\n\t,\":godmode:\"\n\t,\":hurtrealbad:\"\n\t,\":rage1:\"\n\t,\":rage2:\"\n\t,\":rage3:\"\n\t,\":rage4:\"\n\t,\":suspect:\"\n\t,\":trollface:\"\n\t,\":sunny:\"\n\t,\":umbrella:\"\n\t,\":cloud:\"\n\t,\":snowflake:\"\n\t,\":snowman:\"\n\t,\":zap:\"\n\t,\":cyclone:\"\n\t,\":foggy:\"\n\t,\":ocean:\"\n\t,\":cat:\"\n\t,\":dog:\"\n\t,\":mouse:\"\n\t,\":hamster:\"\n\t,\":rabbit:\"\n\t,\":wolf:\"\n\t,\":frog:\"\n\t,\":tiger:\"\n\t,\":koala:\"\n\t,\":bear:\"\n\t,\":pig:\"\n\t,\":pig_nose:\"\n\t,\":cow:\"\n\t,\":boar:\"\n\t,\":monkey_face:\"\n\t,\":monkey:\"\n\t,\":horse:\"\n\t,\":racehorse:\"\n\t,\":camel:\"\n\t,\":sheep:\"\n\t,\":elephant:\"\n\t,\":panda_face:\"\n\t,\":snake:\"\n\t,\":bird:\"\n\t,\":baby_chick:\"\n\t,\":hatched_chick:\"\n\t,\":hatching_chick:\"\n\t,\":chicken:\"\n\t,\":penguin:\"\n\t,\":turtle:\"\n\t,\":bug:\"\n\t,\":honeybee:\"\n\t,\":ant:\"\n\t,\":beetle:\"\n\t,\":snail:\"\n\t,\":octopus:\"\n\t,\":tropical_fish:\"\n\t,\":fish:\"\n\t,\":whale:\"\n\t,\":whale2:\"\n\t,\":dolphin:\"\n\t,\":cow2:\"\n\t,\":ram:\"\n\t,\":rat:\"\n\t,\":water_buffalo:\"\n\t,\":tiger2:\"\n\t,\":rabbit2:\"\n\t,\":dragon:\"\n\t,\":goat:\"\n\t,\":rooster:\"\n\t,\":dog2:\"\n\t,\":pig2:\"\n\t,\":mouse2:\"\n\t,\":ox:\"\n\t,\":dragon_face:\"\n\t,\":blowfish:\"\n\t,\":crocodile:\"\n\t,\":dromedary_camel:\"\n\t,\":leopard:\"\n\t,\":cat2:\"\n\t,\":poodle:\"\n\t,\":paw_prints:\"\n\t,\":bouquet:\"\n\t,\":cherry_blossom:\"\n\t,\":tulip:\"\n\t,\":four_leaf_clover:\"\n\t,\":rose:\"\n\t,\":sunflower:\"\n\t,\":hibiscus:\"\n\t,\":maple_leaf:\"\n\t,\":leaves:\"\n\t,\":fallen_leaf:\"\n\t,\":herb:\"\n\t,\":mushroom:\"\n\t,\":cactus:\"\n\t,\":palm_tree:\"\n\t,\":evergreen_tree:\"\n\t,\":deciduous_tree:\"\n\t,\":chestnut:\"\n\t,\":seedling:\"\n\t,\":blossom:\"\n\t,\":ear_of_rice:\"\n\t,\":shell:\"\n\t,\":globe_with_meridians:\"\n\t,\":sun_with_face:\"\n\t,\":full_moon_with_face:\"\n\t,\":new_moon_with_face:\"\n\t,\":new_moon:\"\n\t,\":waxing_crescent_moon:\"\n\t,\":first_quarter_moon:\"\n\t,\":waxing_gibbous_moon:\"\n\t,\":full_moon:\"\n\t,\":waning_gibbous_moon:\"\n\t,\":last_quarter_moon:\"\n\t,\":waning_crescent_moon:\"\n\t,\":last_quarter_moon_with_face:\"\n\t,\":first_quarter_moon_with_face:\"\n\t,\":moon:\"\n\t,\":earth_africa:\"\n\t,\":earth_americas:\"\n\t,\":earth_asia:\"\n\t,\":volcano:\"\n\t,\":milky_way:\"\n\t,\":partly_sunny:\"\n\t,\":octocat:\"\n\t,\":squirrel:\"\n\t,\":bamboo:\"\n\t,\":gift_heart:\"\n\t,\":dolls:\"\n\t,\":school_satchel:\"\n\t,\":mortar_board:\"\n\t,\":flags:\"\n\t,\":fireworks:\"\n\t,\":sparkler:\"\n\t,\":wind_chime:\"\n\t,\":rice_scene:\"\n\t,\":jack_o_lantern:\"\n\t,\":ghost:\"\n\t,\":santa:\"\n\t,\":christmas_tree:\"\n\t,\":gift:\"\n\t,\":bell:\"\n\t,\":no_bell:\"\n\t,\":tanabata_tree:\"\n\t,\":tada:\"\n\t,\":confetti_ball:\"\n\t,\":balloon:\"\n\t,\":crystal_ball:\"\n\t,\":cd:\"\n\t,\":dvd:\"\n\t,\":floppy_disk:\"\n\t,\":camera:\"\n\t,\":video_camera:\"\n\t,\":movie_camera:\"\n\t,\":computer:\"\n\t,\":tv:\"\n\t,\":iphone:\"\n\t,\":phone:\"\n\t,\":telephone:\"\n\t,\":telephone_receiver:\"\n\t,\":pager:\"\n\t,\":fax:\"\n\t,\":minidisc:\"\n\t,\":vhs:\"\n\t,\":sound:\"\n\t,\":speaker:\"\n\t,\":mute:\"\n\t,\":loudspeaker:\"\n\t,\":mega:\"\n\t,\":hourglass:\"\n\t,\":hourglass_flowing_sand:\"\n\t,\":alarm_clock:\"\n\t,\":watch:\"\n\t,\":radio:\"\n\t,\":satellite:\"\n\t,\":loop:\"\n\t,\":mag:\"\n\t,\":mag_right:\"\n\t,\":unlock:\"\n\t,\":lock:\"\n\t,\":lock_with_ink_pen:\"\n\t,\":closed_lock_with_key:\"\n\t,\":key:\"\n\t,\":bulb:\"\n\t,\":flashlight:\"\n\t,\":high_brightness:\"\n\t,\":low_brightness:\"\n\t,\":electric_plug:\"\n\t,\":battery:\"\n\t,\":calling:\"\n\t,\":email:\"\n\t,\":mailbox:\"\n\t,\":postbox:\"\n\t,\":bath:\"\n\t,\":bathtub:\"\n\t,\":shower:\"\n\t,\":toilet:\"\n\t,\":wrench:\"\n\t,\":nut_and_bolt:\"\n\t,\":hammer:\"\n\t,\":seat:\"\n\t,\":moneybag:\"\n\t,\":yen:\"\n\t,\":dollar:\"\n\t,\":pound:\"\n\t,\":euro:\"\n\t,\":credit_card:\"\n\t,\":money_with_wings:\"\n\t,\":e-mail:\"\n\t,\":inbox_tray:\"\n\t,\":outbox_tray:\"\n\t,\":envelope:\"\n\t,\":incoming_envelope:\"\n\t,\":postal_horn:\"\n\t,\":mailbox_closed:\"\n\t,\":mailbox_with_mail:\"\n\t,\":mailbox_with_no_mail:\"\n\t,\":door:\"\n\t,\":smoking:\"\n\t,\":bomb:\"\n\t,\":gun:\"\n\t,\":hocho:\"\n\t,\":pill:\"\n\t,\":syringe:\"\n\t,\":page_facing_up:\"\n\t,\":page_with_curl:\"\n\t,\":bookmark_tabs:\"\n\t,\":bar_chart:\"\n\t,\":chart_with_upwards_trend:\"\n\t,\":chart_with_downwards_trend:\"\n\t,\":scroll:\"\n\t,\":clipboard:\"\n\t,\":calendar:\"\n\t,\":date:\"\n\t,\":card_index:\"\n\t,\":file_folder:\"\n\t,\":open_file_folder:\"\n\t,\":scissors:\"\n\t,\":pushpin:\"\n\t,\":paperclip:\"\n\t,\":black_nib:\"\n\t,\":pencil2:\"\n\t,\":straight_ruler:\"\n\t,\":triangular_ruler:\"\n\t,\":closed_book:\"\n\t,\":green_book:\"\n\t,\":blue_book:\"\n\t,\":orange_book:\"\n\t,\":notebook:\"\n\t,\":notebook_with_decorative_cover:\"\n\t,\":ledger:\"\n\t,\":books:\"\n\t,\":bookmark:\"\n\t,\":name_badge:\"\n\t,\":microscope:\"\n\t,\":telescope:\"\n\t,\":newspaper:\"\n\t,\":football:\"\n\t,\":basketball:\"\n\t,\":soccer:\"\n\t,\":baseball:\"\n\t,\":tennis:\"\n\t,\":8ball:\"\n\t,\":rugby_football:\"\n\t,\":bowling:\"\n\t,\":golf:\"\n\t,\":mountain_bicyclist:\"\n\t,\":bicyclist:\"\n\t,\":horse_racing:\"\n\t,\":snowboarder:\"\n\t,\":swimmer:\"\n\t,\":surfer:\"\n\t,\":ski:\"\n\t,\":spades:\"\n\t,\":hearts:\"\n\t,\":clubs:\"\n\t,\":diamonds:\"\n\t,\":gem:\"\n\t,\":ring:\"\n\t,\":trophy:\"\n\t,\":musical_score:\"\n\t,\":musical_keyboard:\"\n\t,\":violin:\"\n\t,\":space_invader:\"\n\t,\":video_game:\"\n\t,\":black_joker:\"\n\t,\":flower_playing_cards:\"\n\t,\":game_die:\"\n\t,\":dart:\"\n\t,\":mahjong:\"\n\t,\":clapper:\"\n\t,\":memo:\"\n\t,\":pencil:\"\n\t,\":book:\"\n\t,\":art:\"\n\t,\":microphone:\"\n\t,\":headphones:\"\n\t,\":trumpet:\"\n\t,\":saxophone:\"\n\t,\":guitar:\"\n\t,\":shoe:\"\n\t,\":sandal:\"\n\t,\":high_heel:\"\n\t,\":lipstick:\"\n\t,\":boot:\"\n\t,\":shirt:\"\n\t,\":tshirt:\"\n\t,\":necktie:\"\n\t,\":womans_clothes:\"\n\t,\":dress:\"\n\t,\":running_shirt_with_sash:\"\n\t,\":jeans:\"\n\t,\":kimono:\"\n\t,\":bikini:\"\n\t,\":ribbon:\"\n\t,\":tophat:\"\n\t,\":crown:\"\n\t,\":womans_hat:\"\n\t,\":mans_shoe:\"\n\t,\":closed_umbrella:\"\n\t,\":briefcase:\"\n\t,\":handbag:\"\n\t,\":pouch:\"\n\t,\":purse:\"\n\t,\":eyeglasses:\"\n\t,\":fishing_pole_and_fish:\"\n\t,\":coffee:\"\n\t,\":tea:\"\n\t,\":sake:\"\n\t,\":baby_bottle:\"\n\t,\":beer:\"\n\t,\":beers:\"\n\t,\":cocktail:\"\n\t,\":tropical_drink:\"\n\t,\":wine_glass:\"\n\t,\":fork_and_knife:\"\n\t,\":pizza:\"\n\t,\":hamburger:\"\n\t,\":fries:\"\n\t,\":poultry_leg:\"\n\t,\":meat_on_bone:\"\n\t,\":spaghetti:\"\n\t,\":curry:\"\n\t,\":fried_shrimp:\"\n\t,\":bento:\"\n\t,\":sushi:\"\n\t,\":fish_cake:\"\n\t,\":rice_ball:\"\n\t,\":rice_cracker:\"\n\t,\":rice:\"\n\t,\":ramen:\"\n\t,\":stew:\"\n\t,\":oden:\"\n\t,\":dango:\"\n\t,\":egg:\"\n\t,\":bread:\"\n\t,\":doughnut:\"\n\t,\":custard:\"\n\t,\":icecream:\"\n\t,\":ice_cream:\"\n\t,\":shaved_ice:\"\n\t,\":birthday:\"\n\t,\":cake:\"\n\t,\":cookie:\"\n\t,\":chocolate_bar:\"\n\t,\":candy:\"\n\t,\":lollipop:\"\n\t,\":honey_pot:\"\n\t,\":apple:\"\n\t,\":green_apple:\"\n\t,\":tangerine:\"\n\t,\":lemon:\"\n\t,\":cherries:\"\n\t,\":grapes:\"\n\t,\":watermelon:\"\n\t,\":strawberry:\"\n\t,\":peach:\"\n\t,\":melon:\"\n\t,\":banana:\"\n\t,\":pear:\"\n\t,\":pineapple:\"\n\t,\":sweet_potato:\"\n\t,\":eggplant:\"\n\t,\":tomato:\"\n\t,\":corn:\"\n\t,\":house:\"\n\t,\":house_with_garden:\"\n\t,\":school:\"\n\t,\":office:\"\n\t,\":post_office:\"\n\t,\":hospital:\"\n\t,\":bank:\"\n\t,\":convenience_store:\"\n\t,\":love_hotel:\"\n\t,\":hotel:\"\n\t,\":wedding:\"\n\t,\":church:\"\n\t,\":department_store:\"\n\t,\":european_post_office:\"\n\t,\":city_sunrise:\"\n\t,\":city_sunset:\"\n\t,\":japanese_castle:\"\n\t,\":european_castle:\"\n\t,\":tent:\"\n\t,\":factory:\"\n\t,\":tokyo_tower:\"\n\t,\":japan:\"\n\t,\":mount_fuji:\"\n\t,\":sunrise_over_mountains:\"\n\t,\":sunrise:\"\n\t,\":stars:\"\n\t,\":statue_of_liberty:\"\n\t,\":bridge_at_night:\"\n\t,\":carousel_horse:\"\n\t,\":rainbow:\"\n\t,\":ferris_wheel:\"\n\t,\":fountain:\"\n\t,\":roller_coaster:\"\n\t,\":ship:\"\n\t,\":speedboat:\"\n\t,\":boat:\"\n\t,\":sailboat:\"\n\t,\":rowboat:\"\n\t,\":anchor:\"\n\t,\":rocket:\"\n\t,\":airplane:\"\n\t,\":helicopter:\"\n\t,\":steam_locomotive:\"\n\t,\":tram:\"\n\t,\":mountain_railway:\"\n\t,\":bike:\"\n\t,\":aerial_tramway:\"\n\t,\":suspension_railway:\"\n\t,\":mountain_cableway:\"\n\t,\":tractor:\"\n\t,\":blue_car:\"\n\t,\":oncoming_automobile:\"\n\t,\":car:\"\n\t,\":red_car:\"\n\t,\":taxi:\"\n\t,\":oncoming_taxi:\"\n\t,\":articulated_lorry:\"\n\t,\":bus:\"\n\t,\":oncoming_bus:\"\n\t,\":rotating_light:\"\n\t,\":police_car:\"\n\t,\":oncoming_police_car:\"\n\t,\":fire_engine:\"\n\t,\":ambulance:\"\n\t,\":minibus:\"\n\t,\":truck:\"\n\t,\":train:\"\n\t,\":station:\"\n\t,\":train2:\"\n\t,\":bullettrain_front:\"\n\t,\":bullettrain_side:\"\n\t,\":light_rail:\"\n\t,\":monorail:\"\n\t,\":railway_car:\"\n\t,\":trolleybus:\"\n\t,\":ticket:\"\n\t,\":fuelpump:\"\n\t,\":vertical_traffic_light:\"\n\t,\":traffic_light:\"\n\t,\":warning:\"\n\t,\":construction:\"\n\t,\":beginner:\"\n\t,\":atm:\"\n\t,\":slot_machine:\"\n\t,\":busstop:\"\n\t,\":barber:\"\n\t,\":hotsprings:\"\n\t,\":checkered_flag:\"\n\t,\":crossed_flags:\"\n\t,\":izakaya_lantern:\"\n\t,\":moyai:\"\n\t,\":circus_tent:\"\n\t,\":performing_arts:\"\n\t,\":round_pushpin:\"\n\t,\":triangular_flag_on_post:\"\n\t,\":jp:\"\n\t,\":kr:\"\n\t,\":cn:\"\n\t,\":us:\"\n\t,\":fr:\"\n\t,\":es:\"\n\t,\":it:\"\n\t,\":ru:\"\n\t,\":gb:\"\n\t,\":uk:\"\n\t,\":de:\"\n\t,\":one:\"\n\t,\":two:\"\n\t,\":three:\"\n\t,\":four:\"\n\t,\":five:\"\n\t,\":six:\"\n\t,\":seven:\"\n\t,\":eight:\"\n\t,\":nine:\"\n\t,\":keycap_ten:\"\n\t,\":1234:\"\n\t,\":zero:\"\n\t,\":hash:\"\n\t,\":symbols:\"\n\t,\":arrow_backward:\"\n\t,\":arrow_down:\"\n\t,\":arrow_forward:\"\n\t,\":arrow_left:\"\n\t,\":capital_abcd:\"\n\t,\":abcd:\"\n\t,\":abc:\"\n\t,\":arrow_lower_left:\"\n\t,\":arrow_lower_right:\"\n\t,\":arrow_right:\"\n\t,\":arrow_up:\"\n\t,\":arrow_upper_left:\"\n\t,\":arrow_upper_right:\"\n\t,\":arrow_double_down:\"\n\t,\":arrow_double_up:\"\n\t,\":arrow_down_small:\"\n\t,\":arrow_heading_down:\"\n\t,\":arrow_heading_up:\"\n\t,\":leftwards_arrow_with_hook:\"\n\t,\":arrow_right_hook:\"\n\t,\":left_right_arrow:\"\n\t,\":arrow_up_down:\"\n\t,\":arrow_up_small:\"\n\t,\":arrows_clockwise:\"\n\t,\":arrows_counterclockwise:\"\n\t,\":rewind:\"\n\t,\":fast_forward:\"\n\t,\":information_source:\"\n\t,\":ok:\"\n\t,\":twisted_rightwards_arrows:\"\n\t,\":repeat:\"\n\t,\":repeat_one:\"\n\t,\":new:\"\n\t,\":top:\"\n\t,\":up:\"\n\t,\":cool:\"\n\t,\":free:\"\n\t,\":ng:\"\n\t,\":cinema:\"\n\t,\":koko:\"\n\t,\":signal_strength:\"\n\t,\":u5272:\"\n\t,\":u5408:\"\n\t,\":u55b6:\"\n\t,\":u6307:\"\n\t,\":u6708:\"\n\t,\":u6709:\"\n\t,\":u6e80:\"\n\t,\":u7121:\"\n\t,\":u7533:\"\n\t,\":u7a7a:\"\n\t,\":u7981:\"\n\t,\":sa:\"\n\t,\":restroom:\"\n\t,\":mens:\"\n\t,\":womens:\"\n\t,\":baby_symbol:\"\n\t,\":no_smoking:\"\n\t,\":parking:\"\n\t,\":wheelchair:\"\n\t,\":metro:\"\n\t,\":baggage_claim:\"\n\t,\":accept:\"\n\t,\":wc:\"\n\t,\":potable_water:\"\n\t,\":put_litter_in_its_place:\"\n\t,\":secret:\"\n\t,\":congratulations:\"\n\t,\":m:\"\n\t,\":passport_control:\"\n\t,\":left_luggage:\"\n\t,\":customs:\"\n\t,\":ideograph_advantage:\"\n\t,\":cl:\"\n\t,\":sos:\"\n\t,\":id:\"\n\t,\":no_entry_sign:\"\n\t,\":underage:\"\n\t,\":no_mobile_phones:\"\n\t,\":do_not_litter:\"\n\t,\":non-potable_water:\"\n\t,\":no_bicycles:\"\n\t,\":no_pedestrians:\"\n\t,\":children_crossing:\"\n\t,\":no_entry:\"\n\t,\":eight_spoked_asterisk:\"\n\t,\":eight_pointed_black_star:\"\n\t,\":heart_decoration:\"\n\t,\":vs:\"\n\t,\":vibration_mode:\"\n\t,\":mobile_phone_off:\"\n\t,\":chart:\"\n\t,\":currency_exchange:\"\n\t,\":aries:\"\n\t,\":taurus:\"\n\t,\":gemini:\"\n\t,\":cancer:\"\n\t,\":leo:\"\n\t,\":virgo:\"\n\t,\":libra:\"\n\t,\":scorpius:\"\n\t,\":sagittarius:\"\n\t,\":capricorn:\"\n\t,\":aquarius:\"\n\t,\":pisces:\"\n\t,\":ophiuchus:\"\n\t,\":six_pointed_star:\"\n\t,\":negative_squared_cross_mark:\"\n\t,\":a:\"\n\t,\":b:\"\n\t,\":ab:\"\n\t,\":o2:\"\n\t,\":diamond_shape_with_a_dot_inside:\"\n\t,\":recycle:\"\n\t,\":end:\"\n\t,\":on:\"\n\t,\":soon:\"\n\t,\":clock1:\"\n\t,\":clock130:\"\n\t,\":clock10:\"\n\t,\":clock1030:\"\n\t,\":clock11:\"\n\t,\":clock1130:\"\n\t,\":clock12:\"\n\t,\":clock1230:\"\n\t,\":clock2:\"\n\t,\":clock230:\"\n\t,\":clock3:\"\n\t,\":clock330:\"\n\t,\":clock4:\"\n\t,\":clock430:\"\n\t,\":clock5:\"\n\t,\":clock530:\"\n\t,\":clock6:\"\n\t,\":clock630:\"\n\t,\":clock7:\"\n\t,\":clock730:\"\n\t,\":clock8:\"\n\t,\":clock830:\"\n\t,\":clock9:\"\n\t,\":clock930:\"\n\t,\":heavy_dollar_sign:\"\n\t,\":copyright:\"\n\t,\":registered:\"\n\t,\":tm:\"\n\t,\":x:\"\n\t,\":heavy_exclamation_mark:\"\n\t,\":bangbang:\"\n\t,\":interrobang:\"\n\t,\":o:\"\n\t,\":heavy_multiplication_x:\"\n\t,\":heavy_plus_sign:\"\n\t,\":heavy_minus_sign:\"\n\t,\":heavy_division_sign:\"\n\t,\":white_flower:\"\n\t,\":100:\"\n\t,\":heavy_check_mark:\"\n\t,\":ballot_box_with_check:\"\n\t,\":radio_button:\"\n\t,\":link:\"\n\t,\":curly_loop:\"\n\t,\":wavy_dash:\"\n\t,\":part_alternation_mark:\"\n\t,\":trident:\"\n\t,\":black_square:\"\n\t,\":white_square:\"\n\t,\":white_check_mark:\"\n\t,\":black_square_button:\"\n\t,\":white_square_button:\"\n\t,\":black_circle:\"\n\t,\":white_circle:\"\n\t,\":red_circle:\"\n\t,\":large_blue_circle:\"\n\t,\":large_blue_diamond:\"\n\t,\":large_orange_diamond:\"\n\t,\":small_blue_diamond:\"\n\t,\":small_orange_diamond:\"\n\t,\":small_red_triangle:\"\n\t,\":small_red_triangle_down:\"\n\t,\":shipit:\"\n]\n\nfunction emojer () {\n\tindex = Math.floor(Math.random()*emojis.length)\n\treturn emojis[index]\n}\n\nmodule.exports = emojer\n",
              "type": "blob"
            }
          },
          "entryPoint": "main",
          "dependencies": {},
          "repository": {
            "id": 12983847,
            "name": "emojer",
            "full_name": "STRd6/emojer",
            "owner": {
              "login": "STRd6",
              "id": 18894,
              "avatar_url": "https://0.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045?d=https%3A%2F%2Fidenticons.github.com%2F39df222bffe39629d904e4883eabc654.png",
              "gravatar_id": "33117162fff8a9cf50544a604f60c045",
              "url": "https://api.github.com/users/STRd6",
              "html_url": "https://github.com/STRd6",
              "followers_url": "https://api.github.com/users/STRd6/followers",
              "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
              "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
              "organizations_url": "https://api.github.com/users/STRd6/orgs",
              "repos_url": "https://api.github.com/users/STRd6/repos",
              "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
              "received_events_url": "https://api.github.com/users/STRd6/received_events",
              "type": "User"
            },
            "private": false,
            "html_url": "https://github.com/STRd6/emojer",
            "description": "Randomly returns a Github emoji",
            "fork": true,
            "url": "https://api.github.com/repos/STRd6/emojer",
            "forks_url": "https://api.github.com/repos/STRd6/emojer/forks",
            "keys_url": "https://api.github.com/repos/STRd6/emojer/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/STRd6/emojer/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/STRd6/emojer/teams",
            "hooks_url": "https://api.github.com/repos/STRd6/emojer/hooks",
            "issue_events_url": "https://api.github.com/repos/STRd6/emojer/issues/events{/number}",
            "events_url": "https://api.github.com/repos/STRd6/emojer/events",
            "assignees_url": "https://api.github.com/repos/STRd6/emojer/assignees{/user}",
            "branches_url": "https://api.github.com/repos/STRd6/emojer/branches{/branch}",
            "tags_url": "https://api.github.com/repos/STRd6/emojer/tags",
            "blobs_url": "https://api.github.com/repos/STRd6/emojer/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/STRd6/emojer/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/STRd6/emojer/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/STRd6/emojer/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/STRd6/emojer/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/STRd6/emojer/languages",
            "stargazers_url": "https://api.github.com/repos/STRd6/emojer/stargazers",
            "contributors_url": "https://api.github.com/repos/STRd6/emojer/contributors",
            "subscribers_url": "https://api.github.com/repos/STRd6/emojer/subscribers",
            "subscription_url": "https://api.github.com/repos/STRd6/emojer/subscription",
            "commits_url": "https://api.github.com/repos/STRd6/emojer/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/STRd6/emojer/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/STRd6/emojer/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/STRd6/emojer/issues/comments/{number}",
            "contents_url": "https://api.github.com/repos/STRd6/emojer/contents/{+path}",
            "compare_url": "https://api.github.com/repos/STRd6/emojer/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/STRd6/emojer/merges",
            "archive_url": "https://api.github.com/repos/STRd6/emojer/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/STRd6/emojer/downloads",
            "issues_url": "https://api.github.com/repos/STRd6/emojer/issues{/number}",
            "pulls_url": "https://api.github.com/repos/STRd6/emojer/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/STRd6/emojer/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/STRd6/emojer/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/STRd6/emojer/labels{/name}",
            "created_at": "2013-09-20T21:06:32Z",
            "updated_at": "2013-09-20T21:06:33Z",
            "pushed_at": "2013-09-19T00:22:07Z",
            "git_url": "git://github.com/STRd6/emojer.git",
            "ssh_url": "git@github.com:STRd6/emojer.git",
            "clone_url": "https://github.com/STRd6/emojer.git",
            "svn_url": "https://github.com/STRd6/emojer",
            "homepage": null,
            "size": 252,
            "watchers_count": 0,
            "language": "JavaScript",
            "has_issues": false,
            "has_downloads": true,
            "has_wiki": true,
            "forks_count": 0,
            "mirror_url": null,
            "open_issues_count": 0,
            "forks": 0,
            "open_issues": 0,
            "watchers": 0,
            "master_branch": "master",
            "default_branch": "master",
            "permissions": {
              "admin": true,
              "push": true,
              "pull": true
            },
            "network_count": 1,
            "parent": {
              "id": 12936780,
              "name": "emojer",
              "full_name": "CanastaNasty/emojer",
              "owner": {
                "login": "CanastaNasty",
                "id": 1432520,
                "avatar_url": "https://1.gravatar.com/avatar/0568dac9cff14cb947d2094a92e08f97?d=https%3A%2F%2Fidenticons.github.com%2Fc171966c9f88c386124ebd4c23604f44.png",
                "gravatar_id": "0568dac9cff14cb947d2094a92e08f97",
                "url": "https://api.github.com/users/CanastaNasty",
                "html_url": "https://github.com/CanastaNasty",
                "followers_url": "https://api.github.com/users/CanastaNasty/followers",
                "following_url": "https://api.github.com/users/CanastaNasty/following{/other_user}",
                "gists_url": "https://api.github.com/users/CanastaNasty/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/CanastaNasty/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CanastaNasty/subscriptions",
                "organizations_url": "https://api.github.com/users/CanastaNasty/orgs",
                "repos_url": "https://api.github.com/users/CanastaNasty/repos",
                "events_url": "https://api.github.com/users/CanastaNasty/events{/privacy}",
                "received_events_url": "https://api.github.com/users/CanastaNasty/received_events",
                "type": "User"
              },
              "private": false,
              "html_url": "https://github.com/CanastaNasty/emojer",
              "description": "Randomly returns a Github emoji",
              "fork": false,
              "url": "https://api.github.com/repos/CanastaNasty/emojer",
              "forks_url": "https://api.github.com/repos/CanastaNasty/emojer/forks",
              "keys_url": "https://api.github.com/repos/CanastaNasty/emojer/keys{/key_id}",
              "collaborators_url": "https://api.github.com/repos/CanastaNasty/emojer/collaborators{/collaborator}",
              "teams_url": "https://api.github.com/repos/CanastaNasty/emojer/teams",
              "hooks_url": "https://api.github.com/repos/CanastaNasty/emojer/hooks",
              "issue_events_url": "https://api.github.com/repos/CanastaNasty/emojer/issues/events{/number}",
              "events_url": "https://api.github.com/repos/CanastaNasty/emojer/events",
              "assignees_url": "https://api.github.com/repos/CanastaNasty/emojer/assignees{/user}",
              "branches_url": "https://api.github.com/repos/CanastaNasty/emojer/branches{/branch}",
              "tags_url": "https://api.github.com/repos/CanastaNasty/emojer/tags",
              "blobs_url": "https://api.github.com/repos/CanastaNasty/emojer/git/blobs{/sha}",
              "git_tags_url": "https://api.github.com/repos/CanastaNasty/emojer/git/tags{/sha}",
              "git_refs_url": "https://api.github.com/repos/CanastaNasty/emojer/git/refs{/sha}",
              "trees_url": "https://api.github.com/repos/CanastaNasty/emojer/git/trees{/sha}",
              "statuses_url": "https://api.github.com/repos/CanastaNasty/emojer/statuses/{sha}",
              "languages_url": "https://api.github.com/repos/CanastaNasty/emojer/languages",
              "stargazers_url": "https://api.github.com/repos/CanastaNasty/emojer/stargazers",
              "contributors_url": "https://api.github.com/repos/CanastaNasty/emojer/contributors",
              "subscribers_url": "https://api.github.com/repos/CanastaNasty/emojer/subscribers",
              "subscription_url": "https://api.github.com/repos/CanastaNasty/emojer/subscription",
              "commits_url": "https://api.github.com/repos/CanastaNasty/emojer/commits{/sha}",
              "git_commits_url": "https://api.github.com/repos/CanastaNasty/emojer/git/commits{/sha}",
              "comments_url": "https://api.github.com/repos/CanastaNasty/emojer/comments{/number}",
              "issue_comment_url": "https://api.github.com/repos/CanastaNasty/emojer/issues/comments/{number}",
              "contents_url": "https://api.github.com/repos/CanastaNasty/emojer/contents/{+path}",
              "compare_url": "https://api.github.com/repos/CanastaNasty/emojer/compare/{base}...{head}",
              "merges_url": "https://api.github.com/repos/CanastaNasty/emojer/merges",
              "archive_url": "https://api.github.com/repos/CanastaNasty/emojer/{archive_format}{/ref}",
              "downloads_url": "https://api.github.com/repos/CanastaNasty/emojer/downloads",
              "issues_url": "https://api.github.com/repos/CanastaNasty/emojer/issues{/number}",
              "pulls_url": "https://api.github.com/repos/CanastaNasty/emojer/pulls{/number}",
              "milestones_url": "https://api.github.com/repos/CanastaNasty/emojer/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/CanastaNasty/emojer/notifications{?since,all,participating}",
              "labels_url": "https://api.github.com/repos/CanastaNasty/emojer/labels{/name}",
              "created_at": "2013-09-18T23:17:00Z",
              "updated_at": "2013-09-20T21:06:32Z",
              "pushed_at": "2013-09-19T00:22:07Z",
              "git_url": "git://github.com/CanastaNasty/emojer.git",
              "ssh_url": "git@github.com:CanastaNasty/emojer.git",
              "clone_url": "https://github.com/CanastaNasty/emojer.git",
              "svn_url": "https://github.com/CanastaNasty/emojer",
              "homepage": null,
              "size": 252,
              "watchers_count": 0,
              "language": "JavaScript",
              "has_issues": true,
              "has_downloads": true,
              "has_wiki": true,
              "forks_count": 1,
              "mirror_url": null,
              "open_issues_count": 0,
              "forks": 1,
              "open_issues": 0,
              "watchers": 0,
              "master_branch": "master",
              "default_branch": "master"
            },
            "source": {
              "id": 12936780,
              "name": "emojer",
              "full_name": "CanastaNasty/emojer",
              "owner": {
                "login": "CanastaNasty",
                "id": 1432520,
                "avatar_url": "https://1.gravatar.com/avatar/0568dac9cff14cb947d2094a92e08f97?d=https%3A%2F%2Fidenticons.github.com%2Fc171966c9f88c386124ebd4c23604f44.png",
                "gravatar_id": "0568dac9cff14cb947d2094a92e08f97",
                "url": "https://api.github.com/users/CanastaNasty",
                "html_url": "https://github.com/CanastaNasty",
                "followers_url": "https://api.github.com/users/CanastaNasty/followers",
                "following_url": "https://api.github.com/users/CanastaNasty/following{/other_user}",
                "gists_url": "https://api.github.com/users/CanastaNasty/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/CanastaNasty/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/CanastaNasty/subscriptions",
                "organizations_url": "https://api.github.com/users/CanastaNasty/orgs",
                "repos_url": "https://api.github.com/users/CanastaNasty/repos",
                "events_url": "https://api.github.com/users/CanastaNasty/events{/privacy}",
                "received_events_url": "https://api.github.com/users/CanastaNasty/received_events",
                "type": "User"
              },
              "private": false,
              "html_url": "https://github.com/CanastaNasty/emojer",
              "description": "Randomly returns a Github emoji",
              "fork": false,
              "url": "https://api.github.com/repos/CanastaNasty/emojer",
              "forks_url": "https://api.github.com/repos/CanastaNasty/emojer/forks",
              "keys_url": "https://api.github.com/repos/CanastaNasty/emojer/keys{/key_id}",
              "collaborators_url": "https://api.github.com/repos/CanastaNasty/emojer/collaborators{/collaborator}",
              "teams_url": "https://api.github.com/repos/CanastaNasty/emojer/teams",
              "hooks_url": "https://api.github.com/repos/CanastaNasty/emojer/hooks",
              "issue_events_url": "https://api.github.com/repos/CanastaNasty/emojer/issues/events{/number}",
              "events_url": "https://api.github.com/repos/CanastaNasty/emojer/events",
              "assignees_url": "https://api.github.com/repos/CanastaNasty/emojer/assignees{/user}",
              "branches_url": "https://api.github.com/repos/CanastaNasty/emojer/branches{/branch}",
              "tags_url": "https://api.github.com/repos/CanastaNasty/emojer/tags",
              "blobs_url": "https://api.github.com/repos/CanastaNasty/emojer/git/blobs{/sha}",
              "git_tags_url": "https://api.github.com/repos/CanastaNasty/emojer/git/tags{/sha}",
              "git_refs_url": "https://api.github.com/repos/CanastaNasty/emojer/git/refs{/sha}",
              "trees_url": "https://api.github.com/repos/CanastaNasty/emojer/git/trees{/sha}",
              "statuses_url": "https://api.github.com/repos/CanastaNasty/emojer/statuses/{sha}",
              "languages_url": "https://api.github.com/repos/CanastaNasty/emojer/languages",
              "stargazers_url": "https://api.github.com/repos/CanastaNasty/emojer/stargazers",
              "contributors_url": "https://api.github.com/repos/CanastaNasty/emojer/contributors",
              "subscribers_url": "https://api.github.com/repos/CanastaNasty/emojer/subscribers",
              "subscription_url": "https://api.github.com/repos/CanastaNasty/emojer/subscription",
              "commits_url": "https://api.github.com/repos/CanastaNasty/emojer/commits{/sha}",
              "git_commits_url": "https://api.github.com/repos/CanastaNasty/emojer/git/commits{/sha}",
              "comments_url": "https://api.github.com/repos/CanastaNasty/emojer/comments{/number}",
              "issue_comment_url": "https://api.github.com/repos/CanastaNasty/emojer/issues/comments/{number}",
              "contents_url": "https://api.github.com/repos/CanastaNasty/emojer/contents/{+path}",
              "compare_url": "https://api.github.com/repos/CanastaNasty/emojer/compare/{base}...{head}",
              "merges_url": "https://api.github.com/repos/CanastaNasty/emojer/merges",
              "archive_url": "https://api.github.com/repos/CanastaNasty/emojer/{archive_format}{/ref}",
              "downloads_url": "https://api.github.com/repos/CanastaNasty/emojer/downloads",
              "issues_url": "https://api.github.com/repos/CanastaNasty/emojer/issues{/number}",
              "pulls_url": "https://api.github.com/repos/CanastaNasty/emojer/pulls{/number}",
              "milestones_url": "https://api.github.com/repos/CanastaNasty/emojer/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/CanastaNasty/emojer/notifications{?since,all,participating}",
              "labels_url": "https://api.github.com/repos/CanastaNasty/emojer/labels{/name}",
              "created_at": "2013-09-18T23:17:00Z",
              "updated_at": "2013-09-20T21:06:32Z",
              "pushed_at": "2013-09-19T00:22:07Z",
              "git_url": "git://github.com/CanastaNasty/emojer.git",
              "ssh_url": "git@github.com:CanastaNasty/emojer.git",
              "clone_url": "https://github.com/CanastaNasty/emojer.git",
              "svn_url": "https://github.com/CanastaNasty/emojer",
              "homepage": null,
              "size": 252,
              "watchers_count": 0,
              "language": "JavaScript",
              "has_issues": true,
              "has_downloads": true,
              "has_wiki": true,
              "forks_count": 1,
              "mirror_url": null,
              "open_issues_count": 0,
              "forks": 1,
              "open_issues": 0,
              "watchers": 0,
              "master_branch": "master",
              "default_branch": "master"
            },
            "branch": "master",
            "defaultBranch": "master",
            "includedModules": [
              "Bindable"
            ]
          },
          "progenitor": {
            "url": "http://strd6.github.io/editor/"
          }
        }
      },
      "remoteDependencies": [
        "//code.jquery.com/jquery-1.10.1.min.js",
        "http://strd6.github.io/tempest/javascripts/envweb.js",
        "http://strd6.github.io/require/master.js"
      ],
      "repository": {
        "id": 12910229,
        "name": "github",
        "full_name": "STRd6/github",
        "owner": {
          "login": "STRd6",
          "id": 18894,
          "avatar_url": "https://1.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045?d=https%3A%2F%2Fidenticons.github.com%2F39df222bffe39629d904e4883eabc654.png",
          "gravatar_id": "33117162fff8a9cf50544a604f60c045",
          "url": "https://api.github.com/users/STRd6",
          "html_url": "https://github.com/STRd6",
          "followers_url": "https://api.github.com/users/STRd6/followers",
          "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
          "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
          "organizations_url": "https://api.github.com/users/STRd6/orgs",
          "repos_url": "https://api.github.com/users/STRd6/repos",
          "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
          "received_events_url": "https://api.github.com/users/STRd6/received_events",
          "type": "User"
        },
        "private": false,
        "html_url": "https://github.com/STRd6/github",
        "description": "Github API for online IDEs",
        "fork": false,
        "url": "https://api.github.com/repos/STRd6/github",
        "forks_url": "https://api.github.com/repos/STRd6/github/forks",
        "keys_url": "https://api.github.com/repos/STRd6/github/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/STRd6/github/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/STRd6/github/teams",
        "hooks_url": "https://api.github.com/repos/STRd6/github/hooks",
        "issue_events_url": "https://api.github.com/repos/STRd6/github/issues/events{/number}",
        "events_url": "https://api.github.com/repos/STRd6/github/events",
        "assignees_url": "https://api.github.com/repos/STRd6/github/assignees{/user}",
        "branches_url": "https://api.github.com/repos/STRd6/github/branches{/branch}",
        "tags_url": "https://api.github.com/repos/STRd6/github/tags",
        "blobs_url": "https://api.github.com/repos/STRd6/github/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/STRd6/github/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/STRd6/github/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/STRd6/github/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/STRd6/github/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/STRd6/github/languages",
        "stargazers_url": "https://api.github.com/repos/STRd6/github/stargazers",
        "contributors_url": "https://api.github.com/repos/STRd6/github/contributors",
        "subscribers_url": "https://api.github.com/repos/STRd6/github/subscribers",
        "subscription_url": "https://api.github.com/repos/STRd6/github/subscription",
        "commits_url": "https://api.github.com/repos/STRd6/github/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/STRd6/github/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/STRd6/github/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/STRd6/github/issues/comments/{number}",
        "contents_url": "https://api.github.com/repos/STRd6/github/contents/{+path}",
        "compare_url": "https://api.github.com/repos/STRd6/github/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/STRd6/github/merges",
        "archive_url": "https://api.github.com/repos/STRd6/github/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/STRd6/github/downloads",
        "issues_url": "https://api.github.com/repos/STRd6/github/issues{/number}",
        "pulls_url": "https://api.github.com/repos/STRd6/github/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/STRd6/github/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/STRd6/github/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/STRd6/github/labels{/name}",
        "created_at": "2013-09-18T00:25:56Z",
        "updated_at": "2013-09-23T03:38:28Z",
        "pushed_at": "2013-09-23T03:38:28Z",
        "git_url": "git://github.com/STRd6/github.git",
        "ssh_url": "git@github.com:STRd6/github.git",
        "clone_url": "https://github.com/STRd6/github.git",
        "svn_url": "https://github.com/STRd6/github",
        "homepage": null,
        "size": 3296,
        "watchers_count": 0,
        "language": "CoffeeScript",
        "has_issues": true,
        "has_downloads": true,
        "has_wiki": true,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 1,
        "forks": 0,
        "open_issues": 1,
        "watchers": 0,
        "master_branch": "master",
        "default_branch": "master",
        "permissions": {
          "admin": true,
          "push": true,
          "pull": true
        },
        "network_count": 0,
        "branch": "master",
        "defaultBranch": "master",
        "includedModules": [
          "Bindable"
        ]
      },
      "progenitor": {
        "url": "http://strd6.github.io/editor/"
      }
    }
  },
  "remoteDependencies": [
    "//cdnjs.cloudflare.com/ajax/libs/coffee-script/1.6.3/coffee-script.min.js",
    "//code.jquery.com/jquery-1.10.1.min.js",
    "//d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js",
    "http://strd6.github.io/tempest/javascripts/envweb.js",
    "http://strd6.github.io/require/master.js"
  ],
  "repository": {
    "id": 12478000,
    "name": "editor",
    "full_name": "STRd6/editor",
    "owner": {
      "login": "STRd6",
      "id": 18894,
      "avatar_url": "https://2.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045?d=https%3A%2F%2Fidenticons.github.com%2F39df222bffe39629d904e4883eabc654.png",
      "gravatar_id": "33117162fff8a9cf50544a604f60c045",
      "url": "https://api.github.com/users/STRd6",
      "html_url": "https://github.com/STRd6",
      "followers_url": "https://api.github.com/users/STRd6/followers",
      "following_url": "https://api.github.com/users/STRd6/following{/other_user}",
      "gists_url": "https://api.github.com/users/STRd6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/STRd6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/STRd6/subscriptions",
      "organizations_url": "https://api.github.com/users/STRd6/orgs",
      "repos_url": "https://api.github.com/users/STRd6/repos",
      "events_url": "https://api.github.com/users/STRd6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/STRd6/received_events",
      "type": "User"
    },
    "private": false,
    "html_url": "https://github.com/STRd6/editor",
    "description": "Edit Gists or Github repos and run them in your browser.",
    "fork": false,
    "url": "https://api.github.com/repos/STRd6/editor",
    "forks_url": "https://api.github.com/repos/STRd6/editor/forks",
    "keys_url": "https://api.github.com/repos/STRd6/editor/keys{/key_id}",
    "collaborators_url": "https://api.github.com/repos/STRd6/editor/collaborators{/collaborator}",
    "teams_url": "https://api.github.com/repos/STRd6/editor/teams",
    "hooks_url": "https://api.github.com/repos/STRd6/editor/hooks",
    "issue_events_url": "https://api.github.com/repos/STRd6/editor/issues/events{/number}",
    "events_url": "https://api.github.com/repos/STRd6/editor/events",
    "assignees_url": "https://api.github.com/repos/STRd6/editor/assignees{/user}",
    "branches_url": "https://api.github.com/repos/STRd6/editor/branches{/branch}",
    "tags_url": "https://api.github.com/repos/STRd6/editor/tags",
    "blobs_url": "https://api.github.com/repos/STRd6/editor/git/blobs{/sha}",
    "git_tags_url": "https://api.github.com/repos/STRd6/editor/git/tags{/sha}",
    "git_refs_url": "https://api.github.com/repos/STRd6/editor/git/refs{/sha}",
    "trees_url": "https://api.github.com/repos/STRd6/editor/git/trees{/sha}",
    "statuses_url": "https://api.github.com/repos/STRd6/editor/statuses/{sha}",
    "languages_url": "https://api.github.com/repos/STRd6/editor/languages",
    "stargazers_url": "https://api.github.com/repos/STRd6/editor/stargazers",
    "contributors_url": "https://api.github.com/repos/STRd6/editor/contributors",
    "subscribers_url": "https://api.github.com/repos/STRd6/editor/subscribers",
    "subscription_url": "https://api.github.com/repos/STRd6/editor/subscription",
    "commits_url": "https://api.github.com/repos/STRd6/editor/commits{/sha}",
    "git_commits_url": "https://api.github.com/repos/STRd6/editor/git/commits{/sha}",
    "comments_url": "https://api.github.com/repos/STRd6/editor/comments{/number}",
    "issue_comment_url": "https://api.github.com/repos/STRd6/editor/issues/comments/{number}",
    "contents_url": "https://api.github.com/repos/STRd6/editor/contents/{+path}",
    "compare_url": "https://api.github.com/repos/STRd6/editor/compare/{base}...{head}",
    "merges_url": "https://api.github.com/repos/STRd6/editor/merges",
    "archive_url": "https://api.github.com/repos/STRd6/editor/{archive_format}{/ref}",
    "downloads_url": "https://api.github.com/repos/STRd6/editor/downloads",
    "issues_url": "https://api.github.com/repos/STRd6/editor/issues{/number}",
    "pulls_url": "https://api.github.com/repos/STRd6/editor/pulls{/number}",
    "milestones_url": "https://api.github.com/repos/STRd6/editor/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/STRd6/editor/notifications{?since,all,participating}",
    "labels_url": "https://api.github.com/repos/STRd6/editor/labels{/name}",
    "created_at": "2013-08-30T04:27:41Z",
    "updated_at": "2013-09-22T22:29:19Z",
    "pushed_at": "2013-09-22T22:29:18Z",
    "git_url": "git://github.com/STRd6/editor.git",
    "ssh_url": "git@github.com:STRd6/editor.git",
    "clone_url": "https://github.com/STRd6/editor.git",
    "svn_url": "https://github.com/STRd6/editor",
    "homepage": null,
    "size": 2133,
    "watchers_count": 1,
    "language": "CoffeeScript",
    "has_issues": true,
    "has_downloads": true,
    "has_wiki": true,
    "forks_count": 1,
    "mirror_url": null,
    "open_issues_count": 11,
    "forks": 1,
    "open_issues": 11,
    "watchers": 1,
    "master_branch": "master",
    "default_branch": "master",
    "permissions": {
      "admin": true,
      "push": true,
      "pull": true
    },
    "network_count": 1,
    "branch": "packager-cleanup",
    "defaultBranch": "master",
    "includedModules": [
      "Bindable"
    ]
  },
  "progenitor": {
    "url": "http://strd6.github.io/editor/"
  }
}